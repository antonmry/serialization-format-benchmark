/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.galiglobal.benchmark.thrift.otel.logs.v1;

import com.galiglobal.benchmark.thrift.otel.resource.v1.Resource;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-02-24")
public class ResourceLogs implements org.apache.thrift.TBase<ResourceLogs, ResourceLogs._Fields>, java.io.Serializable, Cloneable, Comparable<ResourceLogs> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResourceLogs");

  private static final org.apache.thrift.protocol.TField RESOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("resource", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SCOPE_LOGS_FIELD_DESC = new org.apache.thrift.protocol.TField("scope_logs", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField SCHEMA_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("schema_url", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ResourceLogsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ResourceLogsTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable Resource resource; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<ScopeLogs> scope_logs; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String schema_url; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESOURCE((short)1, "resource"),
    SCOPE_LOGS((short)2, "scope_logs"),
    SCHEMA_URL((short)3, "schema_url");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESOURCE
          return RESOURCE;
        case 2: // SCOPE_LOGS
          return SCOPE_LOGS;
        case 3: // SCHEMA_URL
          return SCHEMA_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESOURCE, new org.apache.thrift.meta_data.FieldMetaData("resource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Resource.class)));
    tmpMap.put(_Fields.SCOPE_LOGS, new org.apache.thrift.meta_data.FieldMetaData("scope_logs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScopeLogs.class))));
    tmpMap.put(_Fields.SCHEMA_URL, new org.apache.thrift.meta_data.FieldMetaData("schema_url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResourceLogs.class, metaDataMap);
  }

  public ResourceLogs() {
  }

  public ResourceLogs(
    Resource resource,
    java.util.List<ScopeLogs> scope_logs,
    java.lang.String schema_url)
  {
    this();
    this.resource = resource;
    this.scope_logs = scope_logs;
    this.schema_url = schema_url;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ResourceLogs(ResourceLogs other) {
    if (other.isSetResource()) {
      this.resource = new Resource(other.resource);
    }
    if (other.isSetScope_logs()) {
      java.util.List<ScopeLogs> __this__scope_logs = new java.util.ArrayList<ScopeLogs>(other.scope_logs.size());
      for (ScopeLogs other_element : other.scope_logs) {
        __this__scope_logs.add(new ScopeLogs(other_element));
      }
      this.scope_logs = __this__scope_logs;
    }
    if (other.isSetSchema_url()) {
      this.schema_url = other.schema_url;
    }
  }

  @Override
  public ResourceLogs deepCopy() {
    return new ResourceLogs(this);
  }

  @Override
  public void clear() {
    this.resource = null;
    this.scope_logs = null;
    this.schema_url = null;
  }

  @org.apache.thrift.annotation.Nullable
  public Resource getResource() {
    return this.resource;
  }

  public ResourceLogs setResource(@org.apache.thrift.annotation.Nullable Resource resource) {
    this.resource = resource;
    return this;
  }

  public void unsetResource() {
    this.resource = null;
  }

  /** Returns true if field resource is set (has been assigned a value) and false otherwise */
  public boolean isSetResource() {
    return this.resource != null;
  }

  public void setResourceIsSet(boolean value) {
    if (!value) {
      this.resource = null;
    }
  }

  public int getScope_logsSize() {
    return (this.scope_logs == null) ? 0 : this.scope_logs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<ScopeLogs> getScope_logsIterator() {
    return (this.scope_logs == null) ? null : this.scope_logs.iterator();
  }

  public void addToScope_logs(ScopeLogs elem) {
    if (this.scope_logs == null) {
      this.scope_logs = new java.util.ArrayList<ScopeLogs>();
    }
    this.scope_logs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<ScopeLogs> getScope_logs() {
    return this.scope_logs;
  }

  public ResourceLogs setScope_logs(@org.apache.thrift.annotation.Nullable java.util.List<ScopeLogs> scope_logs) {
    this.scope_logs = scope_logs;
    return this;
  }

  public void unsetScope_logs() {
    this.scope_logs = null;
  }

  /** Returns true if field scope_logs is set (has been assigned a value) and false otherwise */
  public boolean isSetScope_logs() {
    return this.scope_logs != null;
  }

  public void setScope_logsIsSet(boolean value) {
    if (!value) {
      this.scope_logs = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSchema_url() {
    return this.schema_url;
  }

  public ResourceLogs setSchema_url(@org.apache.thrift.annotation.Nullable java.lang.String schema_url) {
    this.schema_url = schema_url;
    return this;
  }

  public void unsetSchema_url() {
    this.schema_url = null;
  }

  /** Returns true if field schema_url is set (has been assigned a value) and false otherwise */
  public boolean isSetSchema_url() {
    return this.schema_url != null;
  }

  public void setSchema_urlIsSet(boolean value) {
    if (!value) {
      this.schema_url = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case RESOURCE:
      if (value == null) {
        unsetResource();
      } else {
        setResource((Resource)value);
      }
      break;

    case SCOPE_LOGS:
      if (value == null) {
        unsetScope_logs();
      } else {
        setScope_logs((java.util.List<ScopeLogs>)value);
      }
      break;

    case SCHEMA_URL:
      if (value == null) {
        unsetSchema_url();
      } else {
        setSchema_url((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case RESOURCE:
      return getResource();

    case SCOPE_LOGS:
      return getScope_logs();

    case SCHEMA_URL:
      return getSchema_url();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case RESOURCE:
      return isSetResource();
    case SCOPE_LOGS:
      return isSetScope_logs();
    case SCHEMA_URL:
      return isSetSchema_url();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof ResourceLogs)
      return this.equals((ResourceLogs)that);
    return false;
  }

  public boolean equals(ResourceLogs that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_resource = true && this.isSetResource();
    boolean that_present_resource = true && that.isSetResource();
    if (this_present_resource || that_present_resource) {
      if (!(this_present_resource && that_present_resource))
        return false;
      if (!this.resource.equals(that.resource))
        return false;
    }

    boolean this_present_scope_logs = true && this.isSetScope_logs();
    boolean that_present_scope_logs = true && that.isSetScope_logs();
    if (this_present_scope_logs || that_present_scope_logs) {
      if (!(this_present_scope_logs && that_present_scope_logs))
        return false;
      if (!this.scope_logs.equals(that.scope_logs))
        return false;
    }

    boolean this_present_schema_url = true && this.isSetSchema_url();
    boolean that_present_schema_url = true && that.isSetSchema_url();
    if (this_present_schema_url || that_present_schema_url) {
      if (!(this_present_schema_url && that_present_schema_url))
        return false;
      if (!this.schema_url.equals(that.schema_url))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetResource()) ? 131071 : 524287);
    if (isSetResource())
      hashCode = hashCode * 8191 + resource.hashCode();

    hashCode = hashCode * 8191 + ((isSetScope_logs()) ? 131071 : 524287);
    if (isSetScope_logs())
      hashCode = hashCode * 8191 + scope_logs.hashCode();

    hashCode = hashCode * 8191 + ((isSetSchema_url()) ? 131071 : 524287);
    if (isSetSchema_url())
      hashCode = hashCode * 8191 + schema_url.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ResourceLogs other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetResource(), other.isSetResource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resource, other.resource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetScope_logs(), other.isSetScope_logs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScope_logs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scope_logs, other.scope_logs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSchema_url(), other.isSetSchema_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema_url, other.schema_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ResourceLogs(");
    boolean first = true;

    sb.append("resource:");
    if (this.resource == null) {
      sb.append("null");
    } else {
      sb.append(this.resource);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scope_logs:");
    if (this.scope_logs == null) {
      sb.append("null");
    } else {
      sb.append(this.scope_logs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("schema_url:");
    if (this.schema_url == null) {
      sb.append("null");
    } else {
      sb.append(this.schema_url);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (resource != null) {
      resource.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResourceLogsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public ResourceLogsStandardScheme getScheme() {
      return new ResourceLogsStandardScheme();
    }
  }

  private static class ResourceLogsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ResourceLogs> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, ResourceLogs struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resource = new Resource();
              struct.resource.read(iprot);
              struct.setResourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCOPE_LOGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.scope_logs = new java.util.ArrayList<ScopeLogs>(_list16.size);
                @org.apache.thrift.annotation.Nullable ScopeLogs _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new ScopeLogs();
                  _elem17.read(iprot);
                  struct.scope_logs.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setScope_logsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SCHEMA_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.schema_url = iprot.readString();
              struct.setSchema_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, ResourceLogs struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.resource != null) {
        oprot.writeFieldBegin(RESOURCE_FIELD_DESC);
        struct.resource.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.scope_logs != null) {
        oprot.writeFieldBegin(SCOPE_LOGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.scope_logs.size()));
          for (ScopeLogs _iter19 : struct.scope_logs)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.schema_url != null) {
        oprot.writeFieldBegin(SCHEMA_URL_FIELD_DESC);
        oprot.writeString(struct.schema_url);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResourceLogsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public ResourceLogsTupleScheme getScheme() {
      return new ResourceLogsTupleScheme();
    }
  }

  private static class ResourceLogsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ResourceLogs> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ResourceLogs struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetResource()) {
        optionals.set(0);
      }
      if (struct.isSetScope_logs()) {
        optionals.set(1);
      }
      if (struct.isSetSchema_url()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetResource()) {
        struct.resource.write(oprot);
      }
      if (struct.isSetScope_logs()) {
        {
          oprot.writeI32(struct.scope_logs.size());
          for (ScopeLogs _iter20 : struct.scope_logs)
          {
            _iter20.write(oprot);
          }
        }
      }
      if (struct.isSetSchema_url()) {
        oprot.writeString(struct.schema_url);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ResourceLogs struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.resource = new Resource();
        struct.resource.read(iprot);
        struct.setResourceIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list21 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.scope_logs = new java.util.ArrayList<ScopeLogs>(_list21.size);
          @org.apache.thrift.annotation.Nullable ScopeLogs _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new ScopeLogs();
            _elem22.read(iprot);
            struct.scope_logs.add(_elem22);
          }
        }
        struct.setScope_logsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.schema_url = iprot.readString();
        struct.setSchema_urlIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

