/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.galiglobal.benchmark.thrift.otel.logs.v1;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-02-24")
public class LogsData implements org.apache.thrift.TBase<LogsData, LogsData._Fields>, java.io.Serializable, Cloneable, Comparable<LogsData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LogsData");

  private static final org.apache.thrift.protocol.TField RESOURCE_LOGS_FIELD_DESC = new org.apache.thrift.protocol.TField("resource_logs", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LogsDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LogsDataTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<ResourceLogs> resource_logs; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESOURCE_LOGS((short)1, "resource_logs");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESOURCE_LOGS
          return RESOURCE_LOGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESOURCE_LOGS, new org.apache.thrift.meta_data.FieldMetaData("resource_logs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResourceLogs.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LogsData.class, metaDataMap);
  }

  public LogsData() {
  }

  public LogsData(
    java.util.List<ResourceLogs> resource_logs)
  {
    this();
    this.resource_logs = resource_logs;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LogsData(LogsData other) {
    if (other.isSetResource_logs()) {
      java.util.List<ResourceLogs> __this__resource_logs = new java.util.ArrayList<ResourceLogs>(other.resource_logs.size());
      for (ResourceLogs other_element : other.resource_logs) {
        __this__resource_logs.add(new ResourceLogs(other_element));
      }
      this.resource_logs = __this__resource_logs;
    }
  }

  @Override
  public LogsData deepCopy() {
    return new LogsData(this);
  }

  @Override
  public void clear() {
    this.resource_logs = null;
  }

  public int getResource_logsSize() {
    return (this.resource_logs == null) ? 0 : this.resource_logs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<ResourceLogs> getResource_logsIterator() {
    return (this.resource_logs == null) ? null : this.resource_logs.iterator();
  }

  public void addToResource_logs(ResourceLogs elem) {
    if (this.resource_logs == null) {
      this.resource_logs = new java.util.ArrayList<ResourceLogs>();
    }
    this.resource_logs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<ResourceLogs> getResource_logs() {
    return this.resource_logs;
  }

  public LogsData setResource_logs(@org.apache.thrift.annotation.Nullable java.util.List<ResourceLogs> resource_logs) {
    this.resource_logs = resource_logs;
    return this;
  }

  public void unsetResource_logs() {
    this.resource_logs = null;
  }

  /** Returns true if field resource_logs is set (has been assigned a value) and false otherwise */
  public boolean isSetResource_logs() {
    return this.resource_logs != null;
  }

  public void setResource_logsIsSet(boolean value) {
    if (!value) {
      this.resource_logs = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case RESOURCE_LOGS:
      if (value == null) {
        unsetResource_logs();
      } else {
        setResource_logs((java.util.List<ResourceLogs>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case RESOURCE_LOGS:
      return getResource_logs();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case RESOURCE_LOGS:
      return isSetResource_logs();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof LogsData)
      return this.equals((LogsData)that);
    return false;
  }

  public boolean equals(LogsData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_resource_logs = true && this.isSetResource_logs();
    boolean that_present_resource_logs = true && that.isSetResource_logs();
    if (this_present_resource_logs || that_present_resource_logs) {
      if (!(this_present_resource_logs && that_present_resource_logs))
        return false;
      if (!this.resource_logs.equals(that.resource_logs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetResource_logs()) ? 131071 : 524287);
    if (isSetResource_logs())
      hashCode = hashCode * 8191 + resource_logs.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(LogsData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetResource_logs(), other.isSetResource_logs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResource_logs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resource_logs, other.resource_logs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("LogsData(");
    boolean first = true;

    sb.append("resource_logs:");
    if (this.resource_logs == null) {
      sb.append("null");
    } else {
      sb.append(this.resource_logs);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LogsDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public LogsDataStandardScheme getScheme() {
      return new LogsDataStandardScheme();
    }
  }

  private static class LogsDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<LogsData> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, LogsData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESOURCE_LOGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.resource_logs = new java.util.ArrayList<ResourceLogs>(_list24.size);
                @org.apache.thrift.annotation.Nullable ResourceLogs _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = new ResourceLogs();
                  _elem25.read(iprot);
                  struct.resource_logs.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setResource_logsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, LogsData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.resource_logs != null) {
        oprot.writeFieldBegin(RESOURCE_LOGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.resource_logs.size()));
          for (ResourceLogs _iter27 : struct.resource_logs)
          {
            _iter27.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LogsDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public LogsDataTupleScheme getScheme() {
      return new LogsDataTupleScheme();
    }
  }

  private static class LogsDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<LogsData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LogsData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetResource_logs()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetResource_logs()) {
        {
          oprot.writeI32(struct.resource_logs.size());
          for (ResourceLogs _iter28 : struct.resource_logs)
          {
            _iter28.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LogsData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list29 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.resource_logs = new java.util.ArrayList<ResourceLogs>(_list29.size);
          @org.apache.thrift.annotation.Nullable ResourceLogs _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new ResourceLogs();
            _elem30.read(iprot);
            struct.resource_logs.add(_elem30);
          }
        }
        struct.setResource_logsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

