/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.galiglobal.benchmark.thrift.otel.logs.v1;

import com.galiglobal.benchmark.thrift.otel.common.v1.AnyValue;
import com.galiglobal.benchmark.thrift.otel.common.v1.KeyValue;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-02-24")
public class LogRecord implements org.apache.thrift.TBase<LogRecord, LogRecord._Fields>, java.io.Serializable, Cloneable, Comparable<LogRecord> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LogRecord");

  private static final org.apache.thrift.protocol.TField TIME_UNIX_NANO_FIELD_DESC = new org.apache.thrift.protocol.TField("time_unix_nano", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SEVERITY_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("severity_number", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SEVERITY_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("severity_text", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("body", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField ATTRIBUTES_FIELD_DESC = new org.apache.thrift.protocol.TField("attributes", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField DROPPED_ATTRIBUTES_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("dropped_attributes_count", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField TRACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("trace_id", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("span_id", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField OBSERVED_TIME_UNIX_NANO_FIELD_DESC = new org.apache.thrift.protocol.TField("observed_time_unix_nano", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField EVENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("event_name", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LogRecordStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LogRecordTupleSchemeFactory();

  public long time_unix_nano; // required
  /**
   * 
   * @see SeverityNumber
   */
  public @org.apache.thrift.annotation.Nullable SeverityNumber severity_number; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String severity_text; // required
  public @org.apache.thrift.annotation.Nullable AnyValue body; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<KeyValue> attributes; // required
  public int dropped_attributes_count; // required
  public int flags; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer trace_id; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer span_id; // required
  public long observed_time_unix_nano; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String event_name; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIME_UNIX_NANO((short)1, "time_unix_nano"),
    /**
     * 
     * @see SeverityNumber
     */
    SEVERITY_NUMBER((short)2, "severity_number"),
    SEVERITY_TEXT((short)3, "severity_text"),
    BODY((short)5, "body"),
    ATTRIBUTES((short)6, "attributes"),
    DROPPED_ATTRIBUTES_COUNT((short)7, "dropped_attributes_count"),
    FLAGS((short)8, "flags"),
    TRACE_ID((short)9, "trace_id"),
    SPAN_ID((short)10, "span_id"),
    OBSERVED_TIME_UNIX_NANO((short)11, "observed_time_unix_nano"),
    EVENT_NAME((short)12, "event_name");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIME_UNIX_NANO
          return TIME_UNIX_NANO;
        case 2: // SEVERITY_NUMBER
          return SEVERITY_NUMBER;
        case 3: // SEVERITY_TEXT
          return SEVERITY_TEXT;
        case 5: // BODY
          return BODY;
        case 6: // ATTRIBUTES
          return ATTRIBUTES;
        case 7: // DROPPED_ATTRIBUTES_COUNT
          return DROPPED_ATTRIBUTES_COUNT;
        case 8: // FLAGS
          return FLAGS;
        case 9: // TRACE_ID
          return TRACE_ID;
        case 10: // SPAN_ID
          return SPAN_ID;
        case 11: // OBSERVED_TIME_UNIX_NANO
          return OBSERVED_TIME_UNIX_NANO;
        case 12: // EVENT_NAME
          return EVENT_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIME_UNIX_NANO_ISSET_ID = 0;
  private static final int __DROPPED_ATTRIBUTES_COUNT_ISSET_ID = 1;
  private static final int __FLAGS_ISSET_ID = 2;
  private static final int __OBSERVED_TIME_UNIX_NANO_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIME_UNIX_NANO, new org.apache.thrift.meta_data.FieldMetaData("time_unix_nano", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SEVERITY_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("severity_number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SeverityNumber.class)));
    tmpMap.put(_Fields.SEVERITY_TEXT, new org.apache.thrift.meta_data.FieldMetaData("severity_text", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BODY, new org.apache.thrift.meta_data.FieldMetaData("body", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AnyValue.class)));
    tmpMap.put(_Fields.ATTRIBUTES, new org.apache.thrift.meta_data.FieldMetaData("attributes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyValue.class))));
    tmpMap.put(_Fields.DROPPED_ATTRIBUTES_COUNT, new org.apache.thrift.meta_data.FieldMetaData("dropped_attributes_count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRACE_ID, new org.apache.thrift.meta_data.FieldMetaData("trace_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("span_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.OBSERVED_TIME_UNIX_NANO, new org.apache.thrift.meta_data.FieldMetaData("observed_time_unix_nano", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EVENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("event_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LogRecord.class, metaDataMap);
  }

  public LogRecord() {
  }

  public LogRecord(
    long time_unix_nano,
    SeverityNumber severity_number,
    java.lang.String severity_text,
    AnyValue body,
    java.util.List<KeyValue> attributes,
    int dropped_attributes_count,
    int flags,
    java.nio.ByteBuffer trace_id,
    java.nio.ByteBuffer span_id,
    long observed_time_unix_nano,
    java.lang.String event_name)
  {
    this();
    this.time_unix_nano = time_unix_nano;
    setTime_unix_nanoIsSet(true);
    this.severity_number = severity_number;
    this.severity_text = severity_text;
    this.body = body;
    this.attributes = attributes;
    this.dropped_attributes_count = dropped_attributes_count;
    setDropped_attributes_countIsSet(true);
    this.flags = flags;
    setFlagsIsSet(true);
    this.trace_id = org.apache.thrift.TBaseHelper.copyBinary(trace_id);
    this.span_id = org.apache.thrift.TBaseHelper.copyBinary(span_id);
    this.observed_time_unix_nano = observed_time_unix_nano;
    setObserved_time_unix_nanoIsSet(true);
    this.event_name = event_name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LogRecord(LogRecord other) {
    __isset_bitfield = other.__isset_bitfield;
    this.time_unix_nano = other.time_unix_nano;
    if (other.isSetSeverity_number()) {
      this.severity_number = other.severity_number;
    }
    if (other.isSetSeverity_text()) {
      this.severity_text = other.severity_text;
    }
    if (other.isSetBody()) {
      this.body = new AnyValue(other.body);
    }
    if (other.isSetAttributes()) {
      java.util.List<KeyValue> __this__attributes = new java.util.ArrayList<KeyValue>(other.attributes.size());
      for (KeyValue other_element : other.attributes) {
        __this__attributes.add(new KeyValue(other_element));
      }
      this.attributes = __this__attributes;
    }
    this.dropped_attributes_count = other.dropped_attributes_count;
    this.flags = other.flags;
    if (other.isSetTrace_id()) {
      this.trace_id = org.apache.thrift.TBaseHelper.copyBinary(other.trace_id);
    }
    if (other.isSetSpan_id()) {
      this.span_id = org.apache.thrift.TBaseHelper.copyBinary(other.span_id);
    }
    this.observed_time_unix_nano = other.observed_time_unix_nano;
    if (other.isSetEvent_name()) {
      this.event_name = other.event_name;
    }
  }

  @Override
  public LogRecord deepCopy() {
    return new LogRecord(this);
  }

  @Override
  public void clear() {
    setTime_unix_nanoIsSet(false);
    this.time_unix_nano = 0;
    this.severity_number = null;
    this.severity_text = null;
    this.body = null;
    this.attributes = null;
    setDropped_attributes_countIsSet(false);
    this.dropped_attributes_count = 0;
    setFlagsIsSet(false);
    this.flags = 0;
    this.trace_id = null;
    this.span_id = null;
    setObserved_time_unix_nanoIsSet(false);
    this.observed_time_unix_nano = 0;
    this.event_name = null;
  }

  public long getTime_unix_nano() {
    return this.time_unix_nano;
  }

  public LogRecord setTime_unix_nano(long time_unix_nano) {
    this.time_unix_nano = time_unix_nano;
    setTime_unix_nanoIsSet(true);
    return this;
  }

  public void unsetTime_unix_nano() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIME_UNIX_NANO_ISSET_ID);
  }

  /** Returns true if field time_unix_nano is set (has been assigned a value) and false otherwise */
  public boolean isSetTime_unix_nano() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIME_UNIX_NANO_ISSET_ID);
  }

  public void setTime_unix_nanoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIME_UNIX_NANO_ISSET_ID, value);
  }

  /**
   * 
   * @see SeverityNumber
   */
  @org.apache.thrift.annotation.Nullable
  public SeverityNumber getSeverity_number() {
    return this.severity_number;
  }

  /**
   * 
   * @see SeverityNumber
   */
  public LogRecord setSeverity_number(@org.apache.thrift.annotation.Nullable SeverityNumber severity_number) {
    this.severity_number = severity_number;
    return this;
  }

  public void unsetSeverity_number() {
    this.severity_number = null;
  }

  /** Returns true if field severity_number is set (has been assigned a value) and false otherwise */
  public boolean isSetSeverity_number() {
    return this.severity_number != null;
  }

  public void setSeverity_numberIsSet(boolean value) {
    if (!value) {
      this.severity_number = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSeverity_text() {
    return this.severity_text;
  }

  public LogRecord setSeverity_text(@org.apache.thrift.annotation.Nullable java.lang.String severity_text) {
    this.severity_text = severity_text;
    return this;
  }

  public void unsetSeverity_text() {
    this.severity_text = null;
  }

  /** Returns true if field severity_text is set (has been assigned a value) and false otherwise */
  public boolean isSetSeverity_text() {
    return this.severity_text != null;
  }

  public void setSeverity_textIsSet(boolean value) {
    if (!value) {
      this.severity_text = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public AnyValue getBody() {
    return this.body;
  }

  public LogRecord setBody(@org.apache.thrift.annotation.Nullable AnyValue body) {
    this.body = body;
    return this;
  }

  public void unsetBody() {
    this.body = null;
  }

  /** Returns true if field body is set (has been assigned a value) and false otherwise */
  public boolean isSetBody() {
    return this.body != null;
  }

  public void setBodyIsSet(boolean value) {
    if (!value) {
      this.body = null;
    }
  }

  public int getAttributesSize() {
    return (this.attributes == null) ? 0 : this.attributes.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<KeyValue> getAttributesIterator() {
    return (this.attributes == null) ? null : this.attributes.iterator();
  }

  public void addToAttributes(KeyValue elem) {
    if (this.attributes == null) {
      this.attributes = new java.util.ArrayList<KeyValue>();
    }
    this.attributes.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<KeyValue> getAttributes() {
    return this.attributes;
  }

  public LogRecord setAttributes(@org.apache.thrift.annotation.Nullable java.util.List<KeyValue> attributes) {
    this.attributes = attributes;
    return this;
  }

  public void unsetAttributes() {
    this.attributes = null;
  }

  /** Returns true if field attributes is set (has been assigned a value) and false otherwise */
  public boolean isSetAttributes() {
    return this.attributes != null;
  }

  public void setAttributesIsSet(boolean value) {
    if (!value) {
      this.attributes = null;
    }
  }

  public int getDropped_attributes_count() {
    return this.dropped_attributes_count;
  }

  public LogRecord setDropped_attributes_count(int dropped_attributes_count) {
    this.dropped_attributes_count = dropped_attributes_count;
    setDropped_attributes_countIsSet(true);
    return this;
  }

  public void unsetDropped_attributes_count() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DROPPED_ATTRIBUTES_COUNT_ISSET_ID);
  }

  /** Returns true if field dropped_attributes_count is set (has been assigned a value) and false otherwise */
  public boolean isSetDropped_attributes_count() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DROPPED_ATTRIBUTES_COUNT_ISSET_ID);
  }

  public void setDropped_attributes_countIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DROPPED_ATTRIBUTES_COUNT_ISSET_ID, value);
  }

  public int getFlags() {
    return this.flags;
  }

  public LogRecord setFlags(int flags) {
    this.flags = flags;
    setFlagsIsSet(true);
    return this;
  }

  public void unsetFlags() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLAGS_ISSET_ID);
  }

  /** Returns true if field flags is set (has been assigned a value) and false otherwise */
  public boolean isSetFlags() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLAGS_ISSET_ID);
  }

  public void setFlagsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLAGS_ISSET_ID, value);
  }

  public byte[] getTrace_id() {
    setTrace_id(org.apache.thrift.TBaseHelper.rightSize(trace_id));
    return trace_id == null ? null : trace_id.array();
  }

  public java.nio.ByteBuffer bufferForTrace_id() {
    return org.apache.thrift.TBaseHelper.copyBinary(trace_id);
  }

  public LogRecord setTrace_id(byte[] trace_id) {
    this.trace_id = trace_id == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(trace_id.clone());
    return this;
  }

  public LogRecord setTrace_id(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer trace_id) {
    this.trace_id = org.apache.thrift.TBaseHelper.copyBinary(trace_id);
    return this;
  }

  public void unsetTrace_id() {
    this.trace_id = null;
  }

  /** Returns true if field trace_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTrace_id() {
    return this.trace_id != null;
  }

  public void setTrace_idIsSet(boolean value) {
    if (!value) {
      this.trace_id = null;
    }
  }

  public byte[] getSpan_id() {
    setSpan_id(org.apache.thrift.TBaseHelper.rightSize(span_id));
    return span_id == null ? null : span_id.array();
  }

  public java.nio.ByteBuffer bufferForSpan_id() {
    return org.apache.thrift.TBaseHelper.copyBinary(span_id);
  }

  public LogRecord setSpan_id(byte[] span_id) {
    this.span_id = span_id == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(span_id.clone());
    return this;
  }

  public LogRecord setSpan_id(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer span_id) {
    this.span_id = org.apache.thrift.TBaseHelper.copyBinary(span_id);
    return this;
  }

  public void unsetSpan_id() {
    this.span_id = null;
  }

  /** Returns true if field span_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSpan_id() {
    return this.span_id != null;
  }

  public void setSpan_idIsSet(boolean value) {
    if (!value) {
      this.span_id = null;
    }
  }

  public long getObserved_time_unix_nano() {
    return this.observed_time_unix_nano;
  }

  public LogRecord setObserved_time_unix_nano(long observed_time_unix_nano) {
    this.observed_time_unix_nano = observed_time_unix_nano;
    setObserved_time_unix_nanoIsSet(true);
    return this;
  }

  public void unsetObserved_time_unix_nano() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OBSERVED_TIME_UNIX_NANO_ISSET_ID);
  }

  /** Returns true if field observed_time_unix_nano is set (has been assigned a value) and false otherwise */
  public boolean isSetObserved_time_unix_nano() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OBSERVED_TIME_UNIX_NANO_ISSET_ID);
  }

  public void setObserved_time_unix_nanoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OBSERVED_TIME_UNIX_NANO_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEvent_name() {
    return this.event_name;
  }

  public LogRecord setEvent_name(@org.apache.thrift.annotation.Nullable java.lang.String event_name) {
    this.event_name = event_name;
    return this;
  }

  public void unsetEvent_name() {
    this.event_name = null;
  }

  /** Returns true if field event_name is set (has been assigned a value) and false otherwise */
  public boolean isSetEvent_name() {
    return this.event_name != null;
  }

  public void setEvent_nameIsSet(boolean value) {
    if (!value) {
      this.event_name = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TIME_UNIX_NANO:
      if (value == null) {
        unsetTime_unix_nano();
      } else {
        setTime_unix_nano((java.lang.Long)value);
      }
      break;

    case SEVERITY_NUMBER:
      if (value == null) {
        unsetSeverity_number();
      } else {
        setSeverity_number((SeverityNumber)value);
      }
      break;

    case SEVERITY_TEXT:
      if (value == null) {
        unsetSeverity_text();
      } else {
        setSeverity_text((java.lang.String)value);
      }
      break;

    case BODY:
      if (value == null) {
        unsetBody();
      } else {
        setBody((AnyValue)value);
      }
      break;

    case ATTRIBUTES:
      if (value == null) {
        unsetAttributes();
      } else {
        setAttributes((java.util.List<KeyValue>)value);
      }
      break;

    case DROPPED_ATTRIBUTES_COUNT:
      if (value == null) {
        unsetDropped_attributes_count();
      } else {
        setDropped_attributes_count((java.lang.Integer)value);
      }
      break;

    case FLAGS:
      if (value == null) {
        unsetFlags();
      } else {
        setFlags((java.lang.Integer)value);
      }
      break;

    case TRACE_ID:
      if (value == null) {
        unsetTrace_id();
      } else {
        if (value instanceof byte[]) {
          setTrace_id((byte[])value);
        } else {
          setTrace_id((java.nio.ByteBuffer)value);
        }
      }
      break;

    case SPAN_ID:
      if (value == null) {
        unsetSpan_id();
      } else {
        if (value instanceof byte[]) {
          setSpan_id((byte[])value);
        } else {
          setSpan_id((java.nio.ByteBuffer)value);
        }
      }
      break;

    case OBSERVED_TIME_UNIX_NANO:
      if (value == null) {
        unsetObserved_time_unix_nano();
      } else {
        setObserved_time_unix_nano((java.lang.Long)value);
      }
      break;

    case EVENT_NAME:
      if (value == null) {
        unsetEvent_name();
      } else {
        setEvent_name((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TIME_UNIX_NANO:
      return getTime_unix_nano();

    case SEVERITY_NUMBER:
      return getSeverity_number();

    case SEVERITY_TEXT:
      return getSeverity_text();

    case BODY:
      return getBody();

    case ATTRIBUTES:
      return getAttributes();

    case DROPPED_ATTRIBUTES_COUNT:
      return getDropped_attributes_count();

    case FLAGS:
      return getFlags();

    case TRACE_ID:
      return getTrace_id();

    case SPAN_ID:
      return getSpan_id();

    case OBSERVED_TIME_UNIX_NANO:
      return getObserved_time_unix_nano();

    case EVENT_NAME:
      return getEvent_name();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TIME_UNIX_NANO:
      return isSetTime_unix_nano();
    case SEVERITY_NUMBER:
      return isSetSeverity_number();
    case SEVERITY_TEXT:
      return isSetSeverity_text();
    case BODY:
      return isSetBody();
    case ATTRIBUTES:
      return isSetAttributes();
    case DROPPED_ATTRIBUTES_COUNT:
      return isSetDropped_attributes_count();
    case FLAGS:
      return isSetFlags();
    case TRACE_ID:
      return isSetTrace_id();
    case SPAN_ID:
      return isSetSpan_id();
    case OBSERVED_TIME_UNIX_NANO:
      return isSetObserved_time_unix_nano();
    case EVENT_NAME:
      return isSetEvent_name();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof LogRecord)
      return this.equals((LogRecord)that);
    return false;
  }

  public boolean equals(LogRecord that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_time_unix_nano = true;
    boolean that_present_time_unix_nano = true;
    if (this_present_time_unix_nano || that_present_time_unix_nano) {
      if (!(this_present_time_unix_nano && that_present_time_unix_nano))
        return false;
      if (this.time_unix_nano != that.time_unix_nano)
        return false;
    }

    boolean this_present_severity_number = true && this.isSetSeverity_number();
    boolean that_present_severity_number = true && that.isSetSeverity_number();
    if (this_present_severity_number || that_present_severity_number) {
      if (!(this_present_severity_number && that_present_severity_number))
        return false;
      if (!this.severity_number.equals(that.severity_number))
        return false;
    }

    boolean this_present_severity_text = true && this.isSetSeverity_text();
    boolean that_present_severity_text = true && that.isSetSeverity_text();
    if (this_present_severity_text || that_present_severity_text) {
      if (!(this_present_severity_text && that_present_severity_text))
        return false;
      if (!this.severity_text.equals(that.severity_text))
        return false;
    }

    boolean this_present_body = true && this.isSetBody();
    boolean that_present_body = true && that.isSetBody();
    if (this_present_body || that_present_body) {
      if (!(this_present_body && that_present_body))
        return false;
      if (!this.body.equals(that.body))
        return false;
    }

    boolean this_present_attributes = true && this.isSetAttributes();
    boolean that_present_attributes = true && that.isSetAttributes();
    if (this_present_attributes || that_present_attributes) {
      if (!(this_present_attributes && that_present_attributes))
        return false;
      if (!this.attributes.equals(that.attributes))
        return false;
    }

    boolean this_present_dropped_attributes_count = true;
    boolean that_present_dropped_attributes_count = true;
    if (this_present_dropped_attributes_count || that_present_dropped_attributes_count) {
      if (!(this_present_dropped_attributes_count && that_present_dropped_attributes_count))
        return false;
      if (this.dropped_attributes_count != that.dropped_attributes_count)
        return false;
    }

    boolean this_present_flags = true;
    boolean that_present_flags = true;
    if (this_present_flags || that_present_flags) {
      if (!(this_present_flags && that_present_flags))
        return false;
      if (this.flags != that.flags)
        return false;
    }

    boolean this_present_trace_id = true && this.isSetTrace_id();
    boolean that_present_trace_id = true && that.isSetTrace_id();
    if (this_present_trace_id || that_present_trace_id) {
      if (!(this_present_trace_id && that_present_trace_id))
        return false;
      if (!this.trace_id.equals(that.trace_id))
        return false;
    }

    boolean this_present_span_id = true && this.isSetSpan_id();
    boolean that_present_span_id = true && that.isSetSpan_id();
    if (this_present_span_id || that_present_span_id) {
      if (!(this_present_span_id && that_present_span_id))
        return false;
      if (!this.span_id.equals(that.span_id))
        return false;
    }

    boolean this_present_observed_time_unix_nano = true;
    boolean that_present_observed_time_unix_nano = true;
    if (this_present_observed_time_unix_nano || that_present_observed_time_unix_nano) {
      if (!(this_present_observed_time_unix_nano && that_present_observed_time_unix_nano))
        return false;
      if (this.observed_time_unix_nano != that.observed_time_unix_nano)
        return false;
    }

    boolean this_present_event_name = true && this.isSetEvent_name();
    boolean that_present_event_name = true && that.isSetEvent_name();
    if (this_present_event_name || that_present_event_name) {
      if (!(this_present_event_name && that_present_event_name))
        return false;
      if (!this.event_name.equals(that.event_name))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(time_unix_nano);

    hashCode = hashCode * 8191 + ((isSetSeverity_number()) ? 131071 : 524287);
    if (isSetSeverity_number())
      hashCode = hashCode * 8191 + severity_number.getValue();

    hashCode = hashCode * 8191 + ((isSetSeverity_text()) ? 131071 : 524287);
    if (isSetSeverity_text())
      hashCode = hashCode * 8191 + severity_text.hashCode();

    hashCode = hashCode * 8191 + ((isSetBody()) ? 131071 : 524287);
    if (isSetBody())
      hashCode = hashCode * 8191 + body.hashCode();

    hashCode = hashCode * 8191 + ((isSetAttributes()) ? 131071 : 524287);
    if (isSetAttributes())
      hashCode = hashCode * 8191 + attributes.hashCode();

    hashCode = hashCode * 8191 + dropped_attributes_count;

    hashCode = hashCode * 8191 + flags;

    hashCode = hashCode * 8191 + ((isSetTrace_id()) ? 131071 : 524287);
    if (isSetTrace_id())
      hashCode = hashCode * 8191 + trace_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetSpan_id()) ? 131071 : 524287);
    if (isSetSpan_id())
      hashCode = hashCode * 8191 + span_id.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(observed_time_unix_nano);

    hashCode = hashCode * 8191 + ((isSetEvent_name()) ? 131071 : 524287);
    if (isSetEvent_name())
      hashCode = hashCode * 8191 + event_name.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(LogRecord other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTime_unix_nano(), other.isSetTime_unix_nano());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime_unix_nano()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time_unix_nano, other.time_unix_nano);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSeverity_number(), other.isSetSeverity_number());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeverity_number()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.severity_number, other.severity_number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSeverity_text(), other.isSetSeverity_text());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeverity_text()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.severity_text, other.severity_text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBody(), other.isSetBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.body, other.body);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAttributes(), other.isSetAttributes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttributes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDropped_attributes_count(), other.isSetDropped_attributes_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDropped_attributes_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dropped_attributes_count, other.dropped_attributes_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFlags(), other.isSetFlags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, other.flags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTrace_id(), other.isSetTrace_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrace_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trace_id, other.trace_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpan_id(), other.isSetSpan_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpan_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.span_id, other.span_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetObserved_time_unix_nano(), other.isSetObserved_time_unix_nano());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObserved_time_unix_nano()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.observed_time_unix_nano, other.observed_time_unix_nano);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEvent_name(), other.isSetEvent_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvent_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event_name, other.event_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("LogRecord(");
    boolean first = true;

    sb.append("time_unix_nano:");
    sb.append(this.time_unix_nano);
    first = false;
    if (!first) sb.append(", ");
    sb.append("severity_number:");
    if (this.severity_number == null) {
      sb.append("null");
    } else {
      sb.append(this.severity_number);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("severity_text:");
    if (this.severity_text == null) {
      sb.append("null");
    } else {
      sb.append(this.severity_text);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("body:");
    if (this.body == null) {
      sb.append("null");
    } else {
      sb.append(this.body);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("attributes:");
    if (this.attributes == null) {
      sb.append("null");
    } else {
      sb.append(this.attributes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dropped_attributes_count:");
    sb.append(this.dropped_attributes_count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("flags:");
    sb.append(this.flags);
    first = false;
    if (!first) sb.append(", ");
    sb.append("trace_id:");
    if (this.trace_id == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.trace_id, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("span_id:");
    if (this.span_id == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.span_id, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("observed_time_unix_nano:");
    sb.append(this.observed_time_unix_nano);
    first = false;
    if (!first) sb.append(", ");
    sb.append("event_name:");
    if (this.event_name == null) {
      sb.append("null");
    } else {
      sb.append(this.event_name);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LogRecordStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public LogRecordStandardScheme getScheme() {
      return new LogRecordStandardScheme();
    }
  }

  private static class LogRecordStandardScheme extends org.apache.thrift.scheme.StandardScheme<LogRecord> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, LogRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIME_UNIX_NANO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.time_unix_nano = iprot.readI64();
              struct.setTime_unix_nanoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SEVERITY_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.severity_number = SeverityNumber.findByValue(iprot.readI32());
              struct.setSeverity_numberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SEVERITY_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.severity_text = iprot.readString();
              struct.setSeverity_textIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.body = new AnyValue();
              struct.body.read(iprot);
              struct.setBodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ATTRIBUTES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.attributes = new java.util.ArrayList<KeyValue>(_list0.size);
                @org.apache.thrift.annotation.Nullable KeyValue _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new KeyValue();
                  _elem1.read(iprot);
                  struct.attributes.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setAttributesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DROPPED_ATTRIBUTES_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dropped_attributes_count = iprot.readI32();
              struct.setDropped_attributes_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FLAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.flags = iprot.readI32();
              struct.setFlagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TRACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.trace_id = iprot.readBinary();
              struct.setTrace_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.span_id = iprot.readBinary();
              struct.setSpan_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OBSERVED_TIME_UNIX_NANO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.observed_time_unix_nano = iprot.readI64();
              struct.setObserved_time_unix_nanoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // EVENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.event_name = iprot.readString();
              struct.setEvent_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, LogRecord struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TIME_UNIX_NANO_FIELD_DESC);
      oprot.writeI64(struct.time_unix_nano);
      oprot.writeFieldEnd();
      if (struct.severity_number != null) {
        oprot.writeFieldBegin(SEVERITY_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.severity_number.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.severity_text != null) {
        oprot.writeFieldBegin(SEVERITY_TEXT_FIELD_DESC);
        oprot.writeString(struct.severity_text);
        oprot.writeFieldEnd();
      }
      if (struct.body != null) {
        oprot.writeFieldBegin(BODY_FIELD_DESC);
        struct.body.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.attributes != null) {
        oprot.writeFieldBegin(ATTRIBUTES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.attributes.size()));
          for (KeyValue _iter3 : struct.attributes)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DROPPED_ATTRIBUTES_COUNT_FIELD_DESC);
      oprot.writeI32(struct.dropped_attributes_count);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FLAGS_FIELD_DESC);
      oprot.writeI32(struct.flags);
      oprot.writeFieldEnd();
      if (struct.trace_id != null) {
        oprot.writeFieldBegin(TRACE_ID_FIELD_DESC);
        oprot.writeBinary(struct.trace_id);
        oprot.writeFieldEnd();
      }
      if (struct.span_id != null) {
        oprot.writeFieldBegin(SPAN_ID_FIELD_DESC);
        oprot.writeBinary(struct.span_id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OBSERVED_TIME_UNIX_NANO_FIELD_DESC);
      oprot.writeI64(struct.observed_time_unix_nano);
      oprot.writeFieldEnd();
      if (struct.event_name != null) {
        oprot.writeFieldBegin(EVENT_NAME_FIELD_DESC);
        oprot.writeString(struct.event_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LogRecordTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public LogRecordTupleScheme getScheme() {
      return new LogRecordTupleScheme();
    }
  }

  private static class LogRecordTupleScheme extends org.apache.thrift.scheme.TupleScheme<LogRecord> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LogRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTime_unix_nano()) {
        optionals.set(0);
      }
      if (struct.isSetSeverity_number()) {
        optionals.set(1);
      }
      if (struct.isSetSeverity_text()) {
        optionals.set(2);
      }
      if (struct.isSetBody()) {
        optionals.set(3);
      }
      if (struct.isSetAttributes()) {
        optionals.set(4);
      }
      if (struct.isSetDropped_attributes_count()) {
        optionals.set(5);
      }
      if (struct.isSetFlags()) {
        optionals.set(6);
      }
      if (struct.isSetTrace_id()) {
        optionals.set(7);
      }
      if (struct.isSetSpan_id()) {
        optionals.set(8);
      }
      if (struct.isSetObserved_time_unix_nano()) {
        optionals.set(9);
      }
      if (struct.isSetEvent_name()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetTime_unix_nano()) {
        oprot.writeI64(struct.time_unix_nano);
      }
      if (struct.isSetSeverity_number()) {
        oprot.writeI32(struct.severity_number.getValue());
      }
      if (struct.isSetSeverity_text()) {
        oprot.writeString(struct.severity_text);
      }
      if (struct.isSetBody()) {
        struct.body.write(oprot);
      }
      if (struct.isSetAttributes()) {
        {
          oprot.writeI32(struct.attributes.size());
          for (KeyValue _iter4 : struct.attributes)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetDropped_attributes_count()) {
        oprot.writeI32(struct.dropped_attributes_count);
      }
      if (struct.isSetFlags()) {
        oprot.writeI32(struct.flags);
      }
      if (struct.isSetTrace_id()) {
        oprot.writeBinary(struct.trace_id);
      }
      if (struct.isSetSpan_id()) {
        oprot.writeBinary(struct.span_id);
      }
      if (struct.isSetObserved_time_unix_nano()) {
        oprot.writeI64(struct.observed_time_unix_nano);
      }
      if (struct.isSetEvent_name()) {
        oprot.writeString(struct.event_name);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LogRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.time_unix_nano = iprot.readI64();
        struct.setTime_unix_nanoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.severity_number = SeverityNumber.findByValue(iprot.readI32());
        struct.setSeverity_numberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.severity_text = iprot.readString();
        struct.setSeverity_textIsSet(true);
      }
      if (incoming.get(3)) {
        struct.body = new AnyValue();
        struct.body.read(iprot);
        struct.setBodyIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list5 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.attributes = new java.util.ArrayList<KeyValue>(_list5.size);
          @org.apache.thrift.annotation.Nullable KeyValue _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new KeyValue();
            _elem6.read(iprot);
            struct.attributes.add(_elem6);
          }
        }
        struct.setAttributesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.dropped_attributes_count = iprot.readI32();
        struct.setDropped_attributes_countIsSet(true);
      }
      if (incoming.get(6)) {
        struct.flags = iprot.readI32();
        struct.setFlagsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.trace_id = iprot.readBinary();
        struct.setTrace_idIsSet(true);
      }
      if (incoming.get(8)) {
        struct.span_id = iprot.readBinary();
        struct.setSpan_idIsSet(true);
      }
      if (incoming.get(9)) {
        struct.observed_time_unix_nano = iprot.readI64();
        struct.setObserved_time_unix_nanoIsSet(true);
      }
      if (incoming.get(10)) {
        struct.event_name = iprot.readString();
        struct.setEvent_nameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

