// automatically generated by the FlatBuffers compiler, do not modify

package com.galiglobal.benchmark.flatbuffers.otel.common.v1;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class AnyValue extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static AnyValue getRootAsAnyValue(ByteBuffer _bb) { return getRootAsAnyValue(_bb, new AnyValue()); }
  public static AnyValue getRootAsAnyValue(ByteBuffer _bb, AnyValue obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public AnyValue __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte valueType() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public Table value(Table obj) { int o = __offset(6); return o != 0 ? __union(obj, o + bb_pos) : null; }

  public static int createAnyValue(FlatBufferBuilder builder,
      byte valueType,
      int valueOffset) {
    builder.startTable(2);
    AnyValue.addValue(builder, valueOffset);
    AnyValue.addValueType(builder, valueType);
    return AnyValue.endAnyValue(builder);
  }

  public static void startAnyValue(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addValueType(FlatBufferBuilder builder, byte valueType) { builder.addByte(0, valueType, 0); }
  public static void addValue(FlatBufferBuilder builder, int valueOffset) { builder.addOffset(1, valueOffset, 0); }
  public static int endAnyValue(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishAnyValueBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedAnyValueBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public AnyValue get(int j) { return get(new AnyValue(), j); }
    public AnyValue get(AnyValue obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

