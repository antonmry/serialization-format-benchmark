/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.galiglobal.benchmark.avro.otel;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class LogRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3732498496737610190L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LogRecord\",\"namespace\":\"com.galiglobal.benchmark.avro\",\"fields\":[{\"name\":\"timeUnixNano\",\"type\":\"long\"},{\"name\":\"severityNumber\",\"type\":{\"type\":\"enum\",\"name\":\"SeverityNumber\",\"symbols\":[\"SEVERITY_NUMBER_UNSPECIFIED\",\"SEVERITY_NUMBER_TRACE\",\"SEVERITY_NUMBER_TRACE2\",\"SEVERITY_NUMBER_TRACE3\",\"SEVERITY_NUMBER_TRACE4\",\"SEVERITY_NUMBER_DEBUG\",\"SEVERITY_NUMBER_DEBUG2\",\"SEVERITY_NUMBER_DEBUG3\",\"SEVERITY_NUMBER_DEBUG4\",\"SEVERITY_NUMBER_INFO\",\"SEVERITY_NUMBER_INFO2\",\"SEVERITY_NUMBER_INFO3\",\"SEVERITY_NUMBER_INFO4\",\"SEVERITY_NUMBER_WARN\",\"SEVERITY_NUMBER_WARN2\",\"SEVERITY_NUMBER_WARN3\",\"SEVERITY_NUMBER_WARN4\",\"SEVERITY_NUMBER_ERROR\",\"SEVERITY_NUMBER_ERROR2\",\"SEVERITY_NUMBER_ERROR3\",\"SEVERITY_NUMBER_ERROR4\",\"SEVERITY_NUMBER_FATAL\",\"SEVERITY_NUMBER_FATAL2\",\"SEVERITY_NUMBER_FATAL3\",\"SEVERITY_NUMBER_FATAL4\"]},\"default\":\"SEVERITY_NUMBER_UNSPECIFIED\"},{\"name\":\"severityText\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"body\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"AnyValue\",\"fields\":[{\"name\":\"stringValue\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"boolValue\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"intValue\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"doubleValue\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"arrayValue\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ArrayValue\",\"fields\":[{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":\"AnyValue\"},\"default\":[]}]}],\"default\":null},{\"name\":\"kvlistValue\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"KeyValueList\",\"fields\":[{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"KeyValue\",\"fields\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"AnyValue\"}]}},\"default\":[]}]}],\"default\":null},{\"name\":\"bytesValue\",\"type\":[\"null\",\"bytes\"],\"default\":null}]}],\"default\":null},{\"name\":\"attributes\",\"type\":{\"type\":\"array\",\"items\":\"KeyValue\"},\"default\":[]},{\"name\":\"droppedAttributesCount\",\"type\":\"int\",\"default\":0},{\"name\":\"flags\",\"type\":\"int\",\"default\":0},{\"name\":\"traceId\",\"type\":[\"null\",\"bytes\"],\"default\":null},{\"name\":\"spanId\",\"type\":[\"null\",\"bytes\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<LogRecord> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LogRecord> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<LogRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<LogRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<LogRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this LogRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a LogRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a LogRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static LogRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long timeUnixNano;
  private SeverityNumber severityNumber;
  private java.lang.CharSequence severityText;
  private AnyValue body;
  private java.util.List<KeyValue> attributes;
  private int droppedAttributesCount;
  private int flags;
  private java.nio.ByteBuffer traceId;
  private java.nio.ByteBuffer spanId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LogRecord() {}

  /**
   * All-args constructor.
   * @param timeUnixNano The new value for timeUnixNano
   * @param severityNumber The new value for severityNumber
   * @param severityText The new value for severityText
   * @param body The new value for body
   * @param attributes The new value for attributes
   * @param droppedAttributesCount The new value for droppedAttributesCount
   * @param flags The new value for flags
   * @param traceId The new value for traceId
   * @param spanId The new value for spanId
   */
  public LogRecord(java.lang.Long timeUnixNano, SeverityNumber severityNumber, java.lang.CharSequence severityText, AnyValue body, java.util.List<KeyValue> attributes, java.lang.Integer droppedAttributesCount, java.lang.Integer flags, java.nio.ByteBuffer traceId, java.nio.ByteBuffer spanId) {
    this.timeUnixNano = timeUnixNano;
    this.severityNumber = severityNumber;
    this.severityText = severityText;
    this.body = body;
    this.attributes = attributes;
    this.droppedAttributesCount = droppedAttributesCount;
    this.flags = flags;
    this.traceId = traceId;
    this.spanId = spanId;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timeUnixNano;
    case 1: return severityNumber;
    case 2: return severityText;
    case 3: return body;
    case 4: return attributes;
    case 5: return droppedAttributesCount;
    case 6: return flags;
    case 7: return traceId;
    case 8: return spanId;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timeUnixNano = (java.lang.Long)value$; break;
    case 1: severityNumber = (SeverityNumber)value$; break;
    case 2: severityText = (java.lang.CharSequence)value$; break;
    case 3: body = (AnyValue)value$; break;
    case 4: attributes = (java.util.List<KeyValue>)value$; break;
    case 5: droppedAttributesCount = (java.lang.Integer)value$; break;
    case 6: flags = (java.lang.Integer)value$; break;
    case 7: traceId = (java.nio.ByteBuffer)value$; break;
    case 8: spanId = (java.nio.ByteBuffer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'timeUnixNano' field.
   * @return The value of the 'timeUnixNano' field.
   */
  public long getTimeUnixNano() {
    return timeUnixNano;
  }


  /**
   * Sets the value of the 'timeUnixNano' field.
   * @param value the value to set.
   */
  public void setTimeUnixNano(long value) {
    this.timeUnixNano = value;
  }

  /**
   * Gets the value of the 'severityNumber' field.
   * @return The value of the 'severityNumber' field.
   */
  public SeverityNumber getSeverityNumber() {
    return severityNumber;
  }


  /**
   * Sets the value of the 'severityNumber' field.
   * @param value the value to set.
   */
  public void setSeverityNumber(SeverityNumber value) {
    this.severityNumber = value;
  }

  /**
   * Gets the value of the 'severityText' field.
   * @return The value of the 'severityText' field.
   */
  public java.lang.CharSequence getSeverityText() {
    return severityText;
  }


  /**
   * Sets the value of the 'severityText' field.
   * @param value the value to set.
   */
  public void setSeverityText(java.lang.CharSequence value) {
    this.severityText = value;
  }

  /**
   * Gets the value of the 'body' field.
   * @return The value of the 'body' field.
   */
  public AnyValue getBody() {
    return body;
  }


  /**
   * Sets the value of the 'body' field.
   * @param value the value to set.
   */
  public void setBody(AnyValue value) {
    this.body = value;
  }

  /**
   * Gets the value of the 'attributes' field.
   * @return The value of the 'attributes' field.
   */
  public java.util.List<KeyValue> getAttributes() {
    return attributes;
  }


  /**
   * Sets the value of the 'attributes' field.
   * @param value the value to set.
   */
  public void setAttributes(java.util.List<KeyValue> value) {
    this.attributes = value;
  }

  /**
   * Gets the value of the 'droppedAttributesCount' field.
   * @return The value of the 'droppedAttributesCount' field.
   */
  public int getDroppedAttributesCount() {
    return droppedAttributesCount;
  }


  /**
   * Sets the value of the 'droppedAttributesCount' field.
   * @param value the value to set.
   */
  public void setDroppedAttributesCount(int value) {
    this.droppedAttributesCount = value;
  }

  /**
   * Gets the value of the 'flags' field.
   * @return The value of the 'flags' field.
   */
  public int getFlags() {
    return flags;
  }


  /**
   * Sets the value of the 'flags' field.
   * @param value the value to set.
   */
  public void setFlags(int value) {
    this.flags = value;
  }

  /**
   * Gets the value of the 'traceId' field.
   * @return The value of the 'traceId' field.
   */
  public java.nio.ByteBuffer getTraceId() {
    return traceId;
  }


  /**
   * Sets the value of the 'traceId' field.
   * @param value the value to set.
   */
  public void setTraceId(java.nio.ByteBuffer value) {
    this.traceId = value;
  }

  /**
   * Gets the value of the 'spanId' field.
   * @return The value of the 'spanId' field.
   */
  public java.nio.ByteBuffer getSpanId() {
    return spanId;
  }


  /**
   * Sets the value of the 'spanId' field.
   * @param value the value to set.
   */
  public void setSpanId(java.nio.ByteBuffer value) {
    this.spanId = value;
  }

  /**
   * Creates a new LogRecord RecordBuilder.
   * @return A new LogRecord RecordBuilder
   */
  public static LogRecord.Builder newBuilder() {
    return new LogRecord.Builder();
  }

  /**
   * Creates a new LogRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LogRecord RecordBuilder
   */
  public static LogRecord.Builder newBuilder(LogRecord.Builder other) {
    if (other == null) {
      return new LogRecord.Builder();
    } else {
      return new LogRecord.Builder(other);
    }
  }

  /**
   * Creates a new LogRecord RecordBuilder by copying an existing LogRecord instance.
   * @param other The existing instance to copy.
   * @return A new LogRecord RecordBuilder
   */
  public static LogRecord.Builder newBuilder(LogRecord other) {
    if (other == null) {
      return new LogRecord.Builder();
    } else {
      return new LogRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for LogRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LogRecord>
    implements org.apache.avro.data.RecordBuilder<LogRecord> {

    private long timeUnixNano;
    private SeverityNumber severityNumber;
    private java.lang.CharSequence severityText;
    private AnyValue body;
    private AnyValue.Builder bodyBuilder;
    private java.util.List<KeyValue> attributes;
    private int droppedAttributesCount;
    private int flags;
    private java.nio.ByteBuffer traceId;
    private java.nio.ByteBuffer spanId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(LogRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timeUnixNano)) {
        this.timeUnixNano = data().deepCopy(fields()[0].schema(), other.timeUnixNano);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.severityNumber)) {
        this.severityNumber = data().deepCopy(fields()[1].schema(), other.severityNumber);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.severityText)) {
        this.severityText = data().deepCopy(fields()[2].schema(), other.severityText);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.body)) {
        this.body = data().deepCopy(fields()[3].schema(), other.body);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasBodyBuilder()) {
        this.bodyBuilder = AnyValue.newBuilder(other.getBodyBuilder());
      }
      if (isValidValue(fields()[4], other.attributes)) {
        this.attributes = data().deepCopy(fields()[4].schema(), other.attributes);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.droppedAttributesCount)) {
        this.droppedAttributesCount = data().deepCopy(fields()[5].schema(), other.droppedAttributesCount);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.flags)) {
        this.flags = data().deepCopy(fields()[6].schema(), other.flags);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.traceId)) {
        this.traceId = data().deepCopy(fields()[7].schema(), other.traceId);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.spanId)) {
        this.spanId = data().deepCopy(fields()[8].schema(), other.spanId);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing LogRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(LogRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.timeUnixNano)) {
        this.timeUnixNano = data().deepCopy(fields()[0].schema(), other.timeUnixNano);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.severityNumber)) {
        this.severityNumber = data().deepCopy(fields()[1].schema(), other.severityNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.severityText)) {
        this.severityText = data().deepCopy(fields()[2].schema(), other.severityText);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.body)) {
        this.body = data().deepCopy(fields()[3].schema(), other.body);
        fieldSetFlags()[3] = true;
      }
      this.bodyBuilder = null;
      if (isValidValue(fields()[4], other.attributes)) {
        this.attributes = data().deepCopy(fields()[4].schema(), other.attributes);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.droppedAttributesCount)) {
        this.droppedAttributesCount = data().deepCopy(fields()[5].schema(), other.droppedAttributesCount);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.flags)) {
        this.flags = data().deepCopy(fields()[6].schema(), other.flags);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.traceId)) {
        this.traceId = data().deepCopy(fields()[7].schema(), other.traceId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.spanId)) {
        this.spanId = data().deepCopy(fields()[8].schema(), other.spanId);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'timeUnixNano' field.
      * @return The value.
      */
    public long getTimeUnixNano() {
      return timeUnixNano;
    }


    /**
      * Sets the value of the 'timeUnixNano' field.
      * @param value The value of 'timeUnixNano'.
      * @return This builder.
      */
    public LogRecord.Builder setTimeUnixNano(long value) {
      validate(fields()[0], value);
      this.timeUnixNano = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timeUnixNano' field has been set.
      * @return True if the 'timeUnixNano' field has been set, false otherwise.
      */
    public boolean hasTimeUnixNano() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timeUnixNano' field.
      * @return This builder.
      */
    public LogRecord.Builder clearTimeUnixNano() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'severityNumber' field.
      * @return The value.
      */
    public SeverityNumber getSeverityNumber() {
      return severityNumber;
    }


    /**
      * Sets the value of the 'severityNumber' field.
      * @param value The value of 'severityNumber'.
      * @return This builder.
      */
    public LogRecord.Builder setSeverityNumber(SeverityNumber value) {
      validate(fields()[1], value);
      this.severityNumber = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'severityNumber' field has been set.
      * @return True if the 'severityNumber' field has been set, false otherwise.
      */
    public boolean hasSeverityNumber() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'severityNumber' field.
      * @return This builder.
      */
    public LogRecord.Builder clearSeverityNumber() {
      severityNumber = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'severityText' field.
      * @return The value.
      */
    public java.lang.CharSequence getSeverityText() {
      return severityText;
    }


    /**
      * Sets the value of the 'severityText' field.
      * @param value The value of 'severityText'.
      * @return This builder.
      */
    public LogRecord.Builder setSeverityText(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.severityText = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'severityText' field has been set.
      * @return True if the 'severityText' field has been set, false otherwise.
      */
    public boolean hasSeverityText() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'severityText' field.
      * @return This builder.
      */
    public LogRecord.Builder clearSeverityText() {
      severityText = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'body' field.
      * @return The value.
      */
    public AnyValue getBody() {
      return body;
    }


    /**
      * Sets the value of the 'body' field.
      * @param value The value of 'body'.
      * @return This builder.
      */
    public LogRecord.Builder setBody(AnyValue value) {
      validate(fields()[3], value);
      this.bodyBuilder = null;
      this.body = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'body' field has been set.
      * @return True if the 'body' field has been set, false otherwise.
      */
    public boolean hasBody() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'body' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public AnyValue.Builder getBodyBuilder() {
      if (bodyBuilder == null) {
        if (hasBody()) {
          setBodyBuilder(AnyValue.newBuilder(body));
        } else {
          setBodyBuilder(AnyValue.newBuilder());
        }
      }
      return bodyBuilder;
    }

    /**
     * Sets the Builder instance for the 'body' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public LogRecord.Builder setBodyBuilder(AnyValue.Builder value) {
      clearBody();
      bodyBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'body' field has an active Builder instance
     * @return True if the 'body' field has an active Builder instance
     */
    public boolean hasBodyBuilder() {
      return bodyBuilder != null;
    }

    /**
      * Clears the value of the 'body' field.
      * @return This builder.
      */
    public LogRecord.Builder clearBody() {
      body = null;
      bodyBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'attributes' field.
      * @return The value.
      */
    public java.util.List<KeyValue> getAttributes() {
      return attributes;
    }


    /**
      * Sets the value of the 'attributes' field.
      * @param value The value of 'attributes'.
      * @return This builder.
      */
    public LogRecord.Builder setAttributes(java.util.List<KeyValue> value) {
      validate(fields()[4], value);
      this.attributes = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'attributes' field has been set.
      * @return True if the 'attributes' field has been set, false otherwise.
      */
    public boolean hasAttributes() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'attributes' field.
      * @return This builder.
      */
    public LogRecord.Builder clearAttributes() {
      attributes = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'droppedAttributesCount' field.
      * @return The value.
      */
    public int getDroppedAttributesCount() {
      return droppedAttributesCount;
    }


    /**
      * Sets the value of the 'droppedAttributesCount' field.
      * @param value The value of 'droppedAttributesCount'.
      * @return This builder.
      */
    public LogRecord.Builder setDroppedAttributesCount(int value) {
      validate(fields()[5], value);
      this.droppedAttributesCount = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'droppedAttributesCount' field has been set.
      * @return True if the 'droppedAttributesCount' field has been set, false otherwise.
      */
    public boolean hasDroppedAttributesCount() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'droppedAttributesCount' field.
      * @return This builder.
      */
    public LogRecord.Builder clearDroppedAttributesCount() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'flags' field.
      * @return The value.
      */
    public int getFlags() {
      return flags;
    }


    /**
      * Sets the value of the 'flags' field.
      * @param value The value of 'flags'.
      * @return This builder.
      */
    public LogRecord.Builder setFlags(int value) {
      validate(fields()[6], value);
      this.flags = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'flags' field has been set.
      * @return True if the 'flags' field has been set, false otherwise.
      */
    public boolean hasFlags() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'flags' field.
      * @return This builder.
      */
    public LogRecord.Builder clearFlags() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'traceId' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getTraceId() {
      return traceId;
    }


    /**
      * Sets the value of the 'traceId' field.
      * @param value The value of 'traceId'.
      * @return This builder.
      */
    public LogRecord.Builder setTraceId(java.nio.ByteBuffer value) {
      validate(fields()[7], value);
      this.traceId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'traceId' field has been set.
      * @return True if the 'traceId' field has been set, false otherwise.
      */
    public boolean hasTraceId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'traceId' field.
      * @return This builder.
      */
    public LogRecord.Builder clearTraceId() {
      traceId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'spanId' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getSpanId() {
      return spanId;
    }


    /**
      * Sets the value of the 'spanId' field.
      * @param value The value of 'spanId'.
      * @return This builder.
      */
    public LogRecord.Builder setSpanId(java.nio.ByteBuffer value) {
      validate(fields()[8], value);
      this.spanId = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'spanId' field has been set.
      * @return True if the 'spanId' field has been set, false otherwise.
      */
    public boolean hasSpanId() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'spanId' field.
      * @return This builder.
      */
    public LogRecord.Builder clearSpanId() {
      spanId = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LogRecord build() {
      try {
        LogRecord record = new LogRecord();
        record.timeUnixNano = fieldSetFlags()[0] ? this.timeUnixNano : (java.lang.Long) defaultValue(fields()[0]);
        record.severityNumber = fieldSetFlags()[1] ? this.severityNumber : (SeverityNumber) defaultValue(fields()[1]);
        record.severityText = fieldSetFlags()[2] ? this.severityText : (java.lang.CharSequence) defaultValue(fields()[2]);
        if (bodyBuilder != null) {
          try {
            record.body = this.bodyBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("body"));
            throw e;
          }
        } else {
          record.body = fieldSetFlags()[3] ? this.body : (AnyValue) defaultValue(fields()[3]);
        }
        record.attributes = fieldSetFlags()[4] ? this.attributes : (java.util.List<KeyValue>) defaultValue(fields()[4]);
        record.droppedAttributesCount = fieldSetFlags()[5] ? this.droppedAttributesCount : (java.lang.Integer) defaultValue(fields()[5]);
        record.flags = fieldSetFlags()[6] ? this.flags : (java.lang.Integer) defaultValue(fields()[6]);
        record.traceId = fieldSetFlags()[7] ? this.traceId : (java.nio.ByteBuffer) defaultValue(fields()[7]);
        record.spanId = fieldSetFlags()[8] ? this.spanId : (java.nio.ByteBuffer) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LogRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<LogRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LogRecord>
    READER$ = (org.apache.avro.io.DatumReader<LogRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.timeUnixNano);

    out.writeEnum(this.severityNumber.ordinal());

    if (this.severityText == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.severityText);
    }

    if (this.body == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.body.customEncode(out);
    }

    long size0 = this.attributes.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (KeyValue e0: this.attributes) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeInt(this.droppedAttributesCount);

    out.writeInt(this.flags);

    if (this.traceId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBytes(this.traceId);
    }

    if (this.spanId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBytes(this.spanId);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.timeUnixNano = in.readLong();

      this.severityNumber = SeverityNumber.values()[in.readEnum()];

      if (in.readIndex() != 1) {
        in.readNull();
        this.severityText = null;
      } else {
        this.severityText = in.readString(this.severityText instanceof Utf8 ? (Utf8)this.severityText : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.body = null;
      } else {
        if (this.body == null) {
          this.body = new AnyValue();
        }
        this.body.customDecode(in);
      }

      long size0 = in.readArrayStart();
      java.util.List<KeyValue> a0 = this.attributes;
      if (a0 == null) {
        a0 = new SpecificData.Array<KeyValue>((int)size0, SCHEMA$.getField("attributes").schema());
        this.attributes = a0;
      } else a0.clear();
      SpecificData.Array<KeyValue> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<KeyValue>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          KeyValue e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new KeyValue();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      this.droppedAttributesCount = in.readInt();

      this.flags = in.readInt();

      if (in.readIndex() != 1) {
        in.readNull();
        this.traceId = null;
      } else {
        this.traceId = in.readBytes(this.traceId);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.spanId = null;
      } else {
        this.spanId = in.readBytes(this.spanId);
      }

    } else {
      for (int i = 0; i < 9; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.timeUnixNano = in.readLong();
          break;

        case 1:
          this.severityNumber = SeverityNumber.values()[in.readEnum()];
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.severityText = null;
          } else {
            this.severityText = in.readString(this.severityText instanceof Utf8 ? (Utf8)this.severityText : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.body = null;
          } else {
            if (this.body == null) {
              this.body = new AnyValue();
            }
            this.body.customDecode(in);
          }
          break;

        case 4:
          long size0 = in.readArrayStart();
          java.util.List<KeyValue> a0 = this.attributes;
          if (a0 == null) {
            a0 = new SpecificData.Array<KeyValue>((int)size0, SCHEMA$.getField("attributes").schema());
            this.attributes = a0;
          } else a0.clear();
          SpecificData.Array<KeyValue> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<KeyValue>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              KeyValue e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new KeyValue();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 5:
          this.droppedAttributesCount = in.readInt();
          break;

        case 6:
          this.flags = in.readInt();
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.traceId = null;
          } else {
            this.traceId = in.readBytes(this.traceId);
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.spanId = null;
          } else {
            this.spanId = in.readBytes(this.spanId);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










