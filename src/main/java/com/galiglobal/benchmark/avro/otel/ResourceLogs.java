/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.galiglobal.benchmark.avro.otel;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ResourceLogs extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2041272909972078921L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ResourceLogs\",\"namespace\":\"com.galiglobal.benchmark.avro\",\"fields\":[{\"name\":\"resource\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Resource\",\"fields\":[{\"name\":\"attributes\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"KeyValue\",\"fields\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"value\",\"type\":{\"type\":\"record\",\"name\":\"AnyValue\",\"fields\":[{\"name\":\"stringValue\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"boolValue\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"intValue\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"doubleValue\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"arrayValue\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ArrayValue\",\"fields\":[{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":\"AnyValue\"},\"default\":[]}]}],\"default\":null},{\"name\":\"kvlistValue\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"KeyValueList\",\"fields\":[{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":\"KeyValue\"},\"default\":[]}]}],\"default\":null},{\"name\":\"bytesValue\",\"type\":[\"null\",\"bytes\"],\"default\":null}]}}]}},\"default\":[]},{\"name\":\"droppedAttributesCount\",\"type\":\"int\",\"default\":0}]}],\"default\":null},{\"name\":\"scopeLogs\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ScopeLogs\",\"fields\":[{\"name\":\"scope\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"InstrumentationScope\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"version\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"attributes\",\"type\":{\"type\":\"array\",\"items\":\"KeyValue\"},\"default\":[]},{\"name\":\"droppedAttributesCount\",\"type\":\"int\",\"default\":0}]}],\"default\":null},{\"name\":\"logRecords\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"LogRecord\",\"fields\":[{\"name\":\"timeUnixNano\",\"type\":\"long\"},{\"name\":\"severityNumber\",\"type\":{\"type\":\"enum\",\"name\":\"SeverityNumber\",\"symbols\":[\"SEVERITY_NUMBER_UNSPECIFIED\",\"SEVERITY_NUMBER_TRACE\",\"SEVERITY_NUMBER_TRACE2\",\"SEVERITY_NUMBER_TRACE3\",\"SEVERITY_NUMBER_TRACE4\",\"SEVERITY_NUMBER_DEBUG\",\"SEVERITY_NUMBER_DEBUG2\",\"SEVERITY_NUMBER_DEBUG3\",\"SEVERITY_NUMBER_DEBUG4\",\"SEVERITY_NUMBER_INFO\",\"SEVERITY_NUMBER_INFO2\",\"SEVERITY_NUMBER_INFO3\",\"SEVERITY_NUMBER_INFO4\",\"SEVERITY_NUMBER_WARN\",\"SEVERITY_NUMBER_WARN2\",\"SEVERITY_NUMBER_WARN3\",\"SEVERITY_NUMBER_WARN4\",\"SEVERITY_NUMBER_ERROR\",\"SEVERITY_NUMBER_ERROR2\",\"SEVERITY_NUMBER_ERROR3\",\"SEVERITY_NUMBER_ERROR4\",\"SEVERITY_NUMBER_FATAL\",\"SEVERITY_NUMBER_FATAL2\",\"SEVERITY_NUMBER_FATAL3\",\"SEVERITY_NUMBER_FATAL4\"]},\"default\":\"SEVERITY_NUMBER_UNSPECIFIED\"},{\"name\":\"severityText\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"body\",\"type\":[\"null\",\"AnyValue\"],\"default\":null},{\"name\":\"attributes\",\"type\":{\"type\":\"array\",\"items\":\"KeyValue\"},\"default\":[]},{\"name\":\"droppedAttributesCount\",\"type\":\"int\",\"default\":0},{\"name\":\"flags\",\"type\":\"int\",\"default\":0},{\"name\":\"traceId\",\"type\":[\"null\",\"bytes\"],\"default\":null},{\"name\":\"spanId\",\"type\":[\"null\",\"bytes\"],\"default\":null}]}},\"default\":[]},{\"name\":\"schemaUrl\",\"type\":[\"null\",\"string\"],\"default\":null}]}},\"default\":[]},{\"name\":\"schemaUrl\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ResourceLogs> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ResourceLogs> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ResourceLogs> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ResourceLogs> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ResourceLogs> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ResourceLogs to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ResourceLogs from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ResourceLogs instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ResourceLogs fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private Resource resource;
  private java.util.List<ScopeLogs> scopeLogs;
  private java.lang.CharSequence schemaUrl;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ResourceLogs() {}

  /**
   * All-args constructor.
   * @param resource The new value for resource
   * @param scopeLogs The new value for scopeLogs
   * @param schemaUrl The new value for schemaUrl
   */
  public ResourceLogs(Resource resource, java.util.List<ScopeLogs> scopeLogs, java.lang.CharSequence schemaUrl) {
    this.resource = resource;
    this.scopeLogs = scopeLogs;
    this.schemaUrl = schemaUrl;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return resource;
    case 1: return scopeLogs;
    case 2: return schemaUrl;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: resource = (Resource)value$; break;
    case 1: scopeLogs = (java.util.List<ScopeLogs>)value$; break;
    case 2: schemaUrl = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'resource' field.
   * @return The value of the 'resource' field.
   */
  public Resource getResource() {
    return resource;
  }


  /**
   * Sets the value of the 'resource' field.
   * @param value the value to set.
   */
  public void setResource(Resource value) {
    this.resource = value;
  }

  /**
   * Gets the value of the 'scopeLogs' field.
   * @return The value of the 'scopeLogs' field.
   */
  public java.util.List<ScopeLogs> getScopeLogs() {
    return scopeLogs;
  }


  /**
   * Sets the value of the 'scopeLogs' field.
   * @param value the value to set.
   */
  public void setScopeLogs(java.util.List<ScopeLogs> value) {
    this.scopeLogs = value;
  }

  /**
   * Gets the value of the 'schemaUrl' field.
   * @return The value of the 'schemaUrl' field.
   */
  public java.lang.CharSequence getSchemaUrl() {
    return schemaUrl;
  }


  /**
   * Sets the value of the 'schemaUrl' field.
   * @param value the value to set.
   */
  public void setSchemaUrl(java.lang.CharSequence value) {
    this.schemaUrl = value;
  }

  /**
   * Creates a new ResourceLogs RecordBuilder.
   * @return A new ResourceLogs RecordBuilder
   */
  public static ResourceLogs.Builder newBuilder() {
    return new ResourceLogs.Builder();
  }

  /**
   * Creates a new ResourceLogs RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ResourceLogs RecordBuilder
   */
  public static ResourceLogs.Builder newBuilder(ResourceLogs.Builder other) {
    if (other == null) {
      return new ResourceLogs.Builder();
    } else {
      return new ResourceLogs.Builder(other);
    }
  }

  /**
   * Creates a new ResourceLogs RecordBuilder by copying an existing ResourceLogs instance.
   * @param other The existing instance to copy.
   * @return A new ResourceLogs RecordBuilder
   */
  public static ResourceLogs.Builder newBuilder(ResourceLogs other) {
    if (other == null) {
      return new ResourceLogs.Builder();
    } else {
      return new ResourceLogs.Builder(other);
    }
  }

  /**
   * RecordBuilder for ResourceLogs instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ResourceLogs>
    implements org.apache.avro.data.RecordBuilder<ResourceLogs> {

    private Resource resource;
    private Resource.Builder resourceBuilder;
    private java.util.List<ScopeLogs> scopeLogs;
    private java.lang.CharSequence schemaUrl;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ResourceLogs.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.resource)) {
        this.resource = data().deepCopy(fields()[0].schema(), other.resource);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasResourceBuilder()) {
        this.resourceBuilder = Resource.newBuilder(other.getResourceBuilder());
      }
      if (isValidValue(fields()[1], other.scopeLogs)) {
        this.scopeLogs = data().deepCopy(fields()[1].schema(), other.scopeLogs);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.schemaUrl)) {
        this.schemaUrl = data().deepCopy(fields()[2].schema(), other.schemaUrl);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing ResourceLogs instance
     * @param other The existing instance to copy.
     */
    private Builder(ResourceLogs other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.resource)) {
        this.resource = data().deepCopy(fields()[0].schema(), other.resource);
        fieldSetFlags()[0] = true;
      }
      this.resourceBuilder = null;
      if (isValidValue(fields()[1], other.scopeLogs)) {
        this.scopeLogs = data().deepCopy(fields()[1].schema(), other.scopeLogs);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.schemaUrl)) {
        this.schemaUrl = data().deepCopy(fields()[2].schema(), other.schemaUrl);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'resource' field.
      * @return The value.
      */
    public Resource getResource() {
      return resource;
    }


    /**
      * Sets the value of the 'resource' field.
      * @param value The value of 'resource'.
      * @return This builder.
      */
    public ResourceLogs.Builder setResource(Resource value) {
      validate(fields()[0], value);
      this.resourceBuilder = null;
      this.resource = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'resource' field has been set.
      * @return True if the 'resource' field has been set, false otherwise.
      */
    public boolean hasResource() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'resource' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public Resource.Builder getResourceBuilder() {
      if (resourceBuilder == null) {
        if (hasResource()) {
          setResourceBuilder(Resource.newBuilder(resource));
        } else {
          setResourceBuilder(Resource.newBuilder());
        }
      }
      return resourceBuilder;
    }

    /**
     * Sets the Builder instance for the 'resource' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public ResourceLogs.Builder setResourceBuilder(Resource.Builder value) {
      clearResource();
      resourceBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'resource' field has an active Builder instance
     * @return True if the 'resource' field has an active Builder instance
     */
    public boolean hasResourceBuilder() {
      return resourceBuilder != null;
    }

    /**
      * Clears the value of the 'resource' field.
      * @return This builder.
      */
    public ResourceLogs.Builder clearResource() {
      resource = null;
      resourceBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'scopeLogs' field.
      * @return The value.
      */
    public java.util.List<ScopeLogs> getScopeLogs() {
      return scopeLogs;
    }


    /**
      * Sets the value of the 'scopeLogs' field.
      * @param value The value of 'scopeLogs'.
      * @return This builder.
      */
    public ResourceLogs.Builder setScopeLogs(java.util.List<ScopeLogs> value) {
      validate(fields()[1], value);
      this.scopeLogs = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'scopeLogs' field has been set.
      * @return True if the 'scopeLogs' field has been set, false otherwise.
      */
    public boolean hasScopeLogs() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'scopeLogs' field.
      * @return This builder.
      */
    public ResourceLogs.Builder clearScopeLogs() {
      scopeLogs = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'schemaUrl' field.
      * @return The value.
      */
    public java.lang.CharSequence getSchemaUrl() {
      return schemaUrl;
    }


    /**
      * Sets the value of the 'schemaUrl' field.
      * @param value The value of 'schemaUrl'.
      * @return This builder.
      */
    public ResourceLogs.Builder setSchemaUrl(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.schemaUrl = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'schemaUrl' field has been set.
      * @return True if the 'schemaUrl' field has been set, false otherwise.
      */
    public boolean hasSchemaUrl() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'schemaUrl' field.
      * @return This builder.
      */
    public ResourceLogs.Builder clearSchemaUrl() {
      schemaUrl = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ResourceLogs build() {
      try {
        ResourceLogs record = new ResourceLogs();
        if (resourceBuilder != null) {
          try {
            record.resource = this.resourceBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("resource"));
            throw e;
          }
        } else {
          record.resource = fieldSetFlags()[0] ? this.resource : (Resource) defaultValue(fields()[0]);
        }
        record.scopeLogs = fieldSetFlags()[1] ? this.scopeLogs : (java.util.List<ScopeLogs>) defaultValue(fields()[1]);
        record.schemaUrl = fieldSetFlags()[2] ? this.schemaUrl : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ResourceLogs>
    WRITER$ = (org.apache.avro.io.DatumWriter<ResourceLogs>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ResourceLogs>
    READER$ = (org.apache.avro.io.DatumReader<ResourceLogs>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.resource == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.resource.customEncode(out);
    }

    long size0 = this.scopeLogs.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (ScopeLogs e0: this.scopeLogs) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    if (this.schemaUrl == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.schemaUrl);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.resource = null;
      } else {
        if (this.resource == null) {
          this.resource = new Resource();
        }
        this.resource.customDecode(in);
      }

      long size0 = in.readArrayStart();
      java.util.List<ScopeLogs> a0 = this.scopeLogs;
      if (a0 == null) {
        a0 = new SpecificData.Array<ScopeLogs>((int)size0, SCHEMA$.getField("scopeLogs").schema());
        this.scopeLogs = a0;
      } else a0.clear();
      SpecificData.Array<ScopeLogs> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<ScopeLogs>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          ScopeLogs e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new ScopeLogs();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.schemaUrl = null;
      } else {
        this.schemaUrl = in.readString(this.schemaUrl instanceof Utf8 ? (Utf8)this.schemaUrl : null);
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.resource = null;
          } else {
            if (this.resource == null) {
              this.resource = new Resource();
            }
            this.resource.customDecode(in);
          }
          break;

        case 1:
          long size0 = in.readArrayStart();
          java.util.List<ScopeLogs> a0 = this.scopeLogs;
          if (a0 == null) {
            a0 = new SpecificData.Array<ScopeLogs>((int)size0, SCHEMA$.getField("scopeLogs").schema());
            this.scopeLogs = a0;
          } else a0.clear();
          SpecificData.Array<ScopeLogs> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<ScopeLogs>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              ScopeLogs e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new ScopeLogs();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.schemaUrl = null;
          } else {
            this.schemaUrl = in.readString(this.schemaUrl instanceof Utf8 ? (Utf8)this.schemaUrl : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










