/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.galiglobal.benchmark.avro.otel;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AnyValue extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1047508521654986246L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AnyValue\",\"namespace\":\"com.galiglobal.benchmark.avro\",\"fields\":[{\"name\":\"stringValue\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"boolValue\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"intValue\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"doubleValue\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"arrayValue\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ArrayValue\",\"fields\":[{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":\"AnyValue\"},\"default\":[]}]}],\"default\":null},{\"name\":\"kvlistValue\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"KeyValueList\",\"fields\":[{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"KeyValue\",\"fields\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"AnyValue\"}]}},\"default\":[]}]}],\"default\":null},{\"name\":\"bytesValue\",\"type\":[\"null\",\"bytes\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AnyValue> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AnyValue> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AnyValue> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AnyValue> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AnyValue> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AnyValue to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AnyValue from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AnyValue instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AnyValue fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence stringValue;
  private java.lang.Boolean boolValue;
  private java.lang.Long intValue;
  private java.lang.Double doubleValue;
  private ArrayValue arrayValue;
  private KeyValueList kvlistValue;
  private java.nio.ByteBuffer bytesValue;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AnyValue() {}

  /**
   * All-args constructor.
   * @param stringValue The new value for stringValue
   * @param boolValue The new value for boolValue
   * @param intValue The new value for intValue
   * @param doubleValue The new value for doubleValue
   * @param arrayValue The new value for arrayValue
   * @param kvlistValue The new value for kvlistValue
   * @param bytesValue The new value for bytesValue
   */
  public AnyValue(java.lang.CharSequence stringValue, java.lang.Boolean boolValue, java.lang.Long intValue, java.lang.Double doubleValue, ArrayValue arrayValue, KeyValueList kvlistValue, java.nio.ByteBuffer bytesValue) {
    this.stringValue = stringValue;
    this.boolValue = boolValue;
    this.intValue = intValue;
    this.doubleValue = doubleValue;
    this.arrayValue = arrayValue;
    this.kvlistValue = kvlistValue;
    this.bytesValue = bytesValue;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return stringValue;
    case 1: return boolValue;
    case 2: return intValue;
    case 3: return doubleValue;
    case 4: return arrayValue;
    case 5: return kvlistValue;
    case 6: return bytesValue;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: stringValue = (java.lang.CharSequence)value$; break;
    case 1: boolValue = (java.lang.Boolean)value$; break;
    case 2: intValue = (java.lang.Long)value$; break;
    case 3: doubleValue = (java.lang.Double)value$; break;
    case 4: arrayValue = (ArrayValue)value$; break;
    case 5: kvlistValue = (KeyValueList)value$; break;
    case 6: bytesValue = (java.nio.ByteBuffer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'stringValue' field.
   * @return The value of the 'stringValue' field.
   */
  public java.lang.CharSequence getStringValue() {
    return stringValue;
  }


  /**
   * Sets the value of the 'stringValue' field.
   * @param value the value to set.
   */
  public void setStringValue(java.lang.CharSequence value) {
    this.stringValue = value;
  }

  /**
   * Gets the value of the 'boolValue' field.
   * @return The value of the 'boolValue' field.
   */
  public java.lang.Boolean getBoolValue() {
    return boolValue;
  }


  /**
   * Sets the value of the 'boolValue' field.
   * @param value the value to set.
   */
  public void setBoolValue(java.lang.Boolean value) {
    this.boolValue = value;
  }

  /**
   * Gets the value of the 'intValue' field.
   * @return The value of the 'intValue' field.
   */
  public java.lang.Long getIntValue() {
    return intValue;
  }


  /**
   * Sets the value of the 'intValue' field.
   * @param value the value to set.
   */
  public void setIntValue(java.lang.Long value) {
    this.intValue = value;
  }

  /**
   * Gets the value of the 'doubleValue' field.
   * @return The value of the 'doubleValue' field.
   */
  public java.lang.Double getDoubleValue() {
    return doubleValue;
  }


  /**
   * Sets the value of the 'doubleValue' field.
   * @param value the value to set.
   */
  public void setDoubleValue(java.lang.Double value) {
    this.doubleValue = value;
  }

  /**
   * Gets the value of the 'arrayValue' field.
   * @return The value of the 'arrayValue' field.
   */
  public ArrayValue getArrayValue() {
    return arrayValue;
  }


  /**
   * Sets the value of the 'arrayValue' field.
   * @param value the value to set.
   */
  public void setArrayValue(ArrayValue value) {
    this.arrayValue = value;
  }

  /**
   * Gets the value of the 'kvlistValue' field.
   * @return The value of the 'kvlistValue' field.
   */
  public KeyValueList getKvlistValue() {
    return kvlistValue;
  }


  /**
   * Sets the value of the 'kvlistValue' field.
   * @param value the value to set.
   */
  public void setKvlistValue(KeyValueList value) {
    this.kvlistValue = value;
  }

  /**
   * Gets the value of the 'bytesValue' field.
   * @return The value of the 'bytesValue' field.
   */
  public java.nio.ByteBuffer getBytesValue() {
    return bytesValue;
  }


  /**
   * Sets the value of the 'bytesValue' field.
   * @param value the value to set.
   */
  public void setBytesValue(java.nio.ByteBuffer value) {
    this.bytesValue = value;
  }

  /**
   * Creates a new AnyValue RecordBuilder.
   * @return A new AnyValue RecordBuilder
   */
  public static AnyValue.Builder newBuilder() {
    return new AnyValue.Builder();
  }

  /**
   * Creates a new AnyValue RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AnyValue RecordBuilder
   */
  public static AnyValue.Builder newBuilder(AnyValue.Builder other) {
    if (other == null) {
      return new AnyValue.Builder();
    } else {
      return new AnyValue.Builder(other);
    }
  }

  /**
   * Creates a new AnyValue RecordBuilder by copying an existing AnyValue instance.
   * @param other The existing instance to copy.
   * @return A new AnyValue RecordBuilder
   */
  public static AnyValue.Builder newBuilder(AnyValue other) {
    if (other == null) {
      return new AnyValue.Builder();
    } else {
      return new AnyValue.Builder(other);
    }
  }

  /**
   * RecordBuilder for AnyValue instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AnyValue>
    implements org.apache.avro.data.RecordBuilder<AnyValue> {

    private java.lang.CharSequence stringValue;
    private java.lang.Boolean boolValue;
    private java.lang.Long intValue;
    private java.lang.Double doubleValue;
    private ArrayValue arrayValue;
    private ArrayValue.Builder arrayValueBuilder;
    private KeyValueList kvlistValue;
    private KeyValueList.Builder kvlistValueBuilder;
    private java.nio.ByteBuffer bytesValue;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(AnyValue.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.stringValue)) {
        this.stringValue = data().deepCopy(fields()[0].schema(), other.stringValue);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.boolValue)) {
        this.boolValue = data().deepCopy(fields()[1].schema(), other.boolValue);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.intValue)) {
        this.intValue = data().deepCopy(fields()[2].schema(), other.intValue);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.doubleValue)) {
        this.doubleValue = data().deepCopy(fields()[3].schema(), other.doubleValue);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.arrayValue)) {
        this.arrayValue = data().deepCopy(fields()[4].schema(), other.arrayValue);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (other.hasArrayValueBuilder()) {
        this.arrayValueBuilder = ArrayValue.newBuilder(other.getArrayValueBuilder());
      }
      if (isValidValue(fields()[5], other.kvlistValue)) {
        this.kvlistValue = data().deepCopy(fields()[5].schema(), other.kvlistValue);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasKvlistValueBuilder()) {
        this.kvlistValueBuilder = KeyValueList.newBuilder(other.getKvlistValueBuilder());
      }
      if (isValidValue(fields()[6], other.bytesValue)) {
        this.bytesValue = data().deepCopy(fields()[6].schema(), other.bytesValue);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing AnyValue instance
     * @param other The existing instance to copy.
     */
    private Builder(AnyValue other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.stringValue)) {
        this.stringValue = data().deepCopy(fields()[0].schema(), other.stringValue);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.boolValue)) {
        this.boolValue = data().deepCopy(fields()[1].schema(), other.boolValue);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.intValue)) {
        this.intValue = data().deepCopy(fields()[2].schema(), other.intValue);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.doubleValue)) {
        this.doubleValue = data().deepCopy(fields()[3].schema(), other.doubleValue);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.arrayValue)) {
        this.arrayValue = data().deepCopy(fields()[4].schema(), other.arrayValue);
        fieldSetFlags()[4] = true;
      }
      this.arrayValueBuilder = null;
      if (isValidValue(fields()[5], other.kvlistValue)) {
        this.kvlistValue = data().deepCopy(fields()[5].schema(), other.kvlistValue);
        fieldSetFlags()[5] = true;
      }
      this.kvlistValueBuilder = null;
      if (isValidValue(fields()[6], other.bytesValue)) {
        this.bytesValue = data().deepCopy(fields()[6].schema(), other.bytesValue);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'stringValue' field.
      * @return The value.
      */
    public java.lang.CharSequence getStringValue() {
      return stringValue;
    }


    /**
      * Sets the value of the 'stringValue' field.
      * @param value The value of 'stringValue'.
      * @return This builder.
      */
    public AnyValue.Builder setStringValue(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.stringValue = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'stringValue' field has been set.
      * @return True if the 'stringValue' field has been set, false otherwise.
      */
    public boolean hasStringValue() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'stringValue' field.
      * @return This builder.
      */
    public AnyValue.Builder clearStringValue() {
      stringValue = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'boolValue' field.
      * @return The value.
      */
    public java.lang.Boolean getBoolValue() {
      return boolValue;
    }


    /**
      * Sets the value of the 'boolValue' field.
      * @param value The value of 'boolValue'.
      * @return This builder.
      */
    public AnyValue.Builder setBoolValue(java.lang.Boolean value) {
      validate(fields()[1], value);
      this.boolValue = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'boolValue' field has been set.
      * @return True if the 'boolValue' field has been set, false otherwise.
      */
    public boolean hasBoolValue() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'boolValue' field.
      * @return This builder.
      */
    public AnyValue.Builder clearBoolValue() {
      boolValue = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'intValue' field.
      * @return The value.
      */
    public java.lang.Long getIntValue() {
      return intValue;
    }


    /**
      * Sets the value of the 'intValue' field.
      * @param value The value of 'intValue'.
      * @return This builder.
      */
    public AnyValue.Builder setIntValue(java.lang.Long value) {
      validate(fields()[2], value);
      this.intValue = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'intValue' field has been set.
      * @return True if the 'intValue' field has been set, false otherwise.
      */
    public boolean hasIntValue() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'intValue' field.
      * @return This builder.
      */
    public AnyValue.Builder clearIntValue() {
      intValue = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'doubleValue' field.
      * @return The value.
      */
    public java.lang.Double getDoubleValue() {
      return doubleValue;
    }


    /**
      * Sets the value of the 'doubleValue' field.
      * @param value The value of 'doubleValue'.
      * @return This builder.
      */
    public AnyValue.Builder setDoubleValue(java.lang.Double value) {
      validate(fields()[3], value);
      this.doubleValue = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'doubleValue' field has been set.
      * @return True if the 'doubleValue' field has been set, false otherwise.
      */
    public boolean hasDoubleValue() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'doubleValue' field.
      * @return This builder.
      */
    public AnyValue.Builder clearDoubleValue() {
      doubleValue = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'arrayValue' field.
      * @return The value.
      */
    public ArrayValue getArrayValue() {
      return arrayValue;
    }


    /**
      * Sets the value of the 'arrayValue' field.
      * @param value The value of 'arrayValue'.
      * @return This builder.
      */
    public AnyValue.Builder setArrayValue(ArrayValue value) {
      validate(fields()[4], value);
      this.arrayValueBuilder = null;
      this.arrayValue = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'arrayValue' field has been set.
      * @return True if the 'arrayValue' field has been set, false otherwise.
      */
    public boolean hasArrayValue() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'arrayValue' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public ArrayValue.Builder getArrayValueBuilder() {
      if (arrayValueBuilder == null) {
        if (hasArrayValue()) {
          setArrayValueBuilder(ArrayValue.newBuilder(arrayValue));
        } else {
          setArrayValueBuilder(ArrayValue.newBuilder());
        }
      }
      return arrayValueBuilder;
    }

    /**
     * Sets the Builder instance for the 'arrayValue' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public AnyValue.Builder setArrayValueBuilder(ArrayValue.Builder value) {
      clearArrayValue();
      arrayValueBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'arrayValue' field has an active Builder instance
     * @return True if the 'arrayValue' field has an active Builder instance
     */
    public boolean hasArrayValueBuilder() {
      return arrayValueBuilder != null;
    }

    /**
      * Clears the value of the 'arrayValue' field.
      * @return This builder.
      */
    public AnyValue.Builder clearArrayValue() {
      arrayValue = null;
      arrayValueBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'kvlistValue' field.
      * @return The value.
      */
    public KeyValueList getKvlistValue() {
      return kvlistValue;
    }


    /**
      * Sets the value of the 'kvlistValue' field.
      * @param value The value of 'kvlistValue'.
      * @return This builder.
      */
    public AnyValue.Builder setKvlistValue(KeyValueList value) {
      validate(fields()[5], value);
      this.kvlistValueBuilder = null;
      this.kvlistValue = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'kvlistValue' field has been set.
      * @return True if the 'kvlistValue' field has been set, false otherwise.
      */
    public boolean hasKvlistValue() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'kvlistValue' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public KeyValueList.Builder getKvlistValueBuilder() {
      if (kvlistValueBuilder == null) {
        if (hasKvlistValue()) {
          setKvlistValueBuilder(KeyValueList.newBuilder(kvlistValue));
        } else {
          setKvlistValueBuilder(KeyValueList.newBuilder());
        }
      }
      return kvlistValueBuilder;
    }

    /**
     * Sets the Builder instance for the 'kvlistValue' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public AnyValue.Builder setKvlistValueBuilder(KeyValueList.Builder value) {
      clearKvlistValue();
      kvlistValueBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'kvlistValue' field has an active Builder instance
     * @return True if the 'kvlistValue' field has an active Builder instance
     */
    public boolean hasKvlistValueBuilder() {
      return kvlistValueBuilder != null;
    }

    /**
      * Clears the value of the 'kvlistValue' field.
      * @return This builder.
      */
    public AnyValue.Builder clearKvlistValue() {
      kvlistValue = null;
      kvlistValueBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesValue' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getBytesValue() {
      return bytesValue;
    }


    /**
      * Sets the value of the 'bytesValue' field.
      * @param value The value of 'bytesValue'.
      * @return This builder.
      */
    public AnyValue.Builder setBytesValue(java.nio.ByteBuffer value) {
      validate(fields()[6], value);
      this.bytesValue = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesValue' field has been set.
      * @return True if the 'bytesValue' field has been set, false otherwise.
      */
    public boolean hasBytesValue() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'bytesValue' field.
      * @return This builder.
      */
    public AnyValue.Builder clearBytesValue() {
      bytesValue = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AnyValue build() {
      try {
        AnyValue record = new AnyValue();
        record.stringValue = fieldSetFlags()[0] ? this.stringValue : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.boolValue = fieldSetFlags()[1] ? this.boolValue : (java.lang.Boolean) defaultValue(fields()[1]);
        record.intValue = fieldSetFlags()[2] ? this.intValue : (java.lang.Long) defaultValue(fields()[2]);
        record.doubleValue = fieldSetFlags()[3] ? this.doubleValue : (java.lang.Double) defaultValue(fields()[3]);
        if (arrayValueBuilder != null) {
          try {
            record.arrayValue = this.arrayValueBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("arrayValue"));
            throw e;
          }
        } else {
          record.arrayValue = fieldSetFlags()[4] ? this.arrayValue : (ArrayValue) defaultValue(fields()[4]);
        }
        if (kvlistValueBuilder != null) {
          try {
            record.kvlistValue = this.kvlistValueBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("kvlistValue"));
            throw e;
          }
        } else {
          record.kvlistValue = fieldSetFlags()[5] ? this.kvlistValue : (KeyValueList) defaultValue(fields()[5]);
        }
        record.bytesValue = fieldSetFlags()[6] ? this.bytesValue : (java.nio.ByteBuffer) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AnyValue>
    WRITER$ = (org.apache.avro.io.DatumWriter<AnyValue>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AnyValue>
    READER$ = (org.apache.avro.io.DatumReader<AnyValue>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.stringValue == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.stringValue);
    }

    if (this.boolValue == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.boolValue);
    }

    if (this.intValue == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.intValue);
    }

    if (this.doubleValue == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.doubleValue);
    }

    if (this.arrayValue == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.arrayValue.customEncode(out);
    }

    if (this.kvlistValue == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.kvlistValue.customEncode(out);
    }

    if (this.bytesValue == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBytes(this.bytesValue);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.stringValue = null;
      } else {
        this.stringValue = in.readString(this.stringValue instanceof Utf8 ? (Utf8)this.stringValue : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.boolValue = null;
      } else {
        this.boolValue = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.intValue = null;
      } else {
        this.intValue = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.doubleValue = null;
      } else {
        this.doubleValue = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.arrayValue = null;
      } else {
        if (this.arrayValue == null) {
          this.arrayValue = new ArrayValue();
        }
        this.arrayValue.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.kvlistValue = null;
      } else {
        if (this.kvlistValue == null) {
          this.kvlistValue = new KeyValueList();
        }
        this.kvlistValue.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bytesValue = null;
      } else {
        this.bytesValue = in.readBytes(this.bytesValue);
      }

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.stringValue = null;
          } else {
            this.stringValue = in.readString(this.stringValue instanceof Utf8 ? (Utf8)this.stringValue : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.boolValue = null;
          } else {
            this.boolValue = in.readBoolean();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.intValue = null;
          } else {
            this.intValue = in.readLong();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.doubleValue = null;
          } else {
            this.doubleValue = in.readDouble();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.arrayValue = null;
          } else {
            if (this.arrayValue == null) {
              this.arrayValue = new ArrayValue();
            }
            this.arrayValue.customDecode(in);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.kvlistValue = null;
          } else {
            if (this.kvlistValue == null) {
              this.kvlistValue = new KeyValueList();
            }
            this.kvlistValue.customDecode(in);
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bytesValue = null;
          } else {
            this.bytesValue = in.readBytes(this.bytesValue);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










