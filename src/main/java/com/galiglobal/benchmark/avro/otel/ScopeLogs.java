/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.galiglobal.benchmark.avro.otel;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ScopeLogs extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5806991090419510518L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ScopeLogs\",\"namespace\":\"com.galiglobal.benchmark.avro\",\"fields\":[{\"name\":\"scope\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"InstrumentationScope\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"version\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"attributes\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"KeyValue\",\"fields\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"value\",\"type\":{\"type\":\"record\",\"name\":\"AnyValue\",\"fields\":[{\"name\":\"stringValue\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"boolValue\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"intValue\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"doubleValue\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"arrayValue\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ArrayValue\",\"fields\":[{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":\"AnyValue\"},\"default\":[]}]}],\"default\":null},{\"name\":\"kvlistValue\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"KeyValueList\",\"fields\":[{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":\"KeyValue\"},\"default\":[]}]}],\"default\":null},{\"name\":\"bytesValue\",\"type\":[\"null\",\"bytes\"],\"default\":null}]}}]}},\"default\":[]},{\"name\":\"droppedAttributesCount\",\"type\":\"int\",\"default\":0}]}],\"default\":null},{\"name\":\"logRecords\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"LogRecord\",\"fields\":[{\"name\":\"timeUnixNano\",\"type\":\"long\"},{\"name\":\"severityNumber\",\"type\":{\"type\":\"enum\",\"name\":\"SeverityNumber\",\"symbols\":[\"SEVERITY_NUMBER_UNSPECIFIED\",\"SEVERITY_NUMBER_TRACE\",\"SEVERITY_NUMBER_TRACE2\",\"SEVERITY_NUMBER_TRACE3\",\"SEVERITY_NUMBER_TRACE4\",\"SEVERITY_NUMBER_DEBUG\",\"SEVERITY_NUMBER_DEBUG2\",\"SEVERITY_NUMBER_DEBUG3\",\"SEVERITY_NUMBER_DEBUG4\",\"SEVERITY_NUMBER_INFO\",\"SEVERITY_NUMBER_INFO2\",\"SEVERITY_NUMBER_INFO3\",\"SEVERITY_NUMBER_INFO4\",\"SEVERITY_NUMBER_WARN\",\"SEVERITY_NUMBER_WARN2\",\"SEVERITY_NUMBER_WARN3\",\"SEVERITY_NUMBER_WARN4\",\"SEVERITY_NUMBER_ERROR\",\"SEVERITY_NUMBER_ERROR2\",\"SEVERITY_NUMBER_ERROR3\",\"SEVERITY_NUMBER_ERROR4\",\"SEVERITY_NUMBER_FATAL\",\"SEVERITY_NUMBER_FATAL2\",\"SEVERITY_NUMBER_FATAL3\",\"SEVERITY_NUMBER_FATAL4\"]},\"default\":\"SEVERITY_NUMBER_UNSPECIFIED\"},{\"name\":\"severityText\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"body\",\"type\":[\"null\",\"AnyValue\"],\"default\":null},{\"name\":\"attributes\",\"type\":{\"type\":\"array\",\"items\":\"KeyValue\"},\"default\":[]},{\"name\":\"droppedAttributesCount\",\"type\":\"int\",\"default\":0},{\"name\":\"flags\",\"type\":\"int\",\"default\":0},{\"name\":\"traceId\",\"type\":[\"null\",\"bytes\"],\"default\":null},{\"name\":\"spanId\",\"type\":[\"null\",\"bytes\"],\"default\":null}]}},\"default\":[]},{\"name\":\"schemaUrl\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ScopeLogs> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ScopeLogs> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ScopeLogs> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ScopeLogs> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ScopeLogs> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ScopeLogs to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ScopeLogs from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ScopeLogs instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ScopeLogs fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private InstrumentationScope scope;
  private java.util.List<LogRecord> logRecords;
  private java.lang.CharSequence schemaUrl;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ScopeLogs() {}

  /**
   * All-args constructor.
   * @param scope The new value for scope
   * @param logRecords The new value for logRecords
   * @param schemaUrl The new value for schemaUrl
   */
  public ScopeLogs(InstrumentationScope scope, java.util.List<LogRecord> logRecords, java.lang.CharSequence schemaUrl) {
    this.scope = scope;
    this.logRecords = logRecords;
    this.schemaUrl = schemaUrl;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return scope;
    case 1: return logRecords;
    case 2: return schemaUrl;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: scope = (InstrumentationScope)value$; break;
    case 1: logRecords = (java.util.List<LogRecord>)value$; break;
    case 2: schemaUrl = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'scope' field.
   * @return The value of the 'scope' field.
   */
  public InstrumentationScope getScope() {
    return scope;
  }


  /**
   * Sets the value of the 'scope' field.
   * @param value the value to set.
   */
  public void setScope(InstrumentationScope value) {
    this.scope = value;
  }

  /**
   * Gets the value of the 'logRecords' field.
   * @return The value of the 'logRecords' field.
   */
  public java.util.List<LogRecord> getLogRecords() {
    return logRecords;
  }


  /**
   * Sets the value of the 'logRecords' field.
   * @param value the value to set.
   */
  public void setLogRecords(java.util.List<LogRecord> value) {
    this.logRecords = value;
  }

  /**
   * Gets the value of the 'schemaUrl' field.
   * @return The value of the 'schemaUrl' field.
   */
  public java.lang.CharSequence getSchemaUrl() {
    return schemaUrl;
  }


  /**
   * Sets the value of the 'schemaUrl' field.
   * @param value the value to set.
   */
  public void setSchemaUrl(java.lang.CharSequence value) {
    this.schemaUrl = value;
  }

  /**
   * Creates a new ScopeLogs RecordBuilder.
   * @return A new ScopeLogs RecordBuilder
   */
  public static ScopeLogs.Builder newBuilder() {
    return new ScopeLogs.Builder();
  }

  /**
   * Creates a new ScopeLogs RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ScopeLogs RecordBuilder
   */
  public static ScopeLogs.Builder newBuilder(ScopeLogs.Builder other) {
    if (other == null) {
      return new ScopeLogs.Builder();
    } else {
      return new ScopeLogs.Builder(other);
    }
  }

  /**
   * Creates a new ScopeLogs RecordBuilder by copying an existing ScopeLogs instance.
   * @param other The existing instance to copy.
   * @return A new ScopeLogs RecordBuilder
   */
  public static ScopeLogs.Builder newBuilder(ScopeLogs other) {
    if (other == null) {
      return new ScopeLogs.Builder();
    } else {
      return new ScopeLogs.Builder(other);
    }
  }

  /**
   * RecordBuilder for ScopeLogs instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ScopeLogs>
    implements org.apache.avro.data.RecordBuilder<ScopeLogs> {

    private InstrumentationScope scope;
    private InstrumentationScope.Builder scopeBuilder;
    private java.util.List<LogRecord> logRecords;
    private java.lang.CharSequence schemaUrl;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ScopeLogs.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.scope)) {
        this.scope = data().deepCopy(fields()[0].schema(), other.scope);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasScopeBuilder()) {
        this.scopeBuilder = InstrumentationScope.newBuilder(other.getScopeBuilder());
      }
      if (isValidValue(fields()[1], other.logRecords)) {
        this.logRecords = data().deepCopy(fields()[1].schema(), other.logRecords);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.schemaUrl)) {
        this.schemaUrl = data().deepCopy(fields()[2].schema(), other.schemaUrl);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing ScopeLogs instance
     * @param other The existing instance to copy.
     */
    private Builder(ScopeLogs other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.scope)) {
        this.scope = data().deepCopy(fields()[0].schema(), other.scope);
        fieldSetFlags()[0] = true;
      }
      this.scopeBuilder = null;
      if (isValidValue(fields()[1], other.logRecords)) {
        this.logRecords = data().deepCopy(fields()[1].schema(), other.logRecords);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.schemaUrl)) {
        this.schemaUrl = data().deepCopy(fields()[2].schema(), other.schemaUrl);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'scope' field.
      * @return The value.
      */
    public InstrumentationScope getScope() {
      return scope;
    }


    /**
      * Sets the value of the 'scope' field.
      * @param value The value of 'scope'.
      * @return This builder.
      */
    public ScopeLogs.Builder setScope(InstrumentationScope value) {
      validate(fields()[0], value);
      this.scopeBuilder = null;
      this.scope = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'scope' field has been set.
      * @return True if the 'scope' field has been set, false otherwise.
      */
    public boolean hasScope() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'scope' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public InstrumentationScope.Builder getScopeBuilder() {
      if (scopeBuilder == null) {
        if (hasScope()) {
          setScopeBuilder(InstrumentationScope.newBuilder(scope));
        } else {
          setScopeBuilder(InstrumentationScope.newBuilder());
        }
      }
      return scopeBuilder;
    }

    /**
     * Sets the Builder instance for the 'scope' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public ScopeLogs.Builder setScopeBuilder(InstrumentationScope.Builder value) {
      clearScope();
      scopeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'scope' field has an active Builder instance
     * @return True if the 'scope' field has an active Builder instance
     */
    public boolean hasScopeBuilder() {
      return scopeBuilder != null;
    }

    /**
      * Clears the value of the 'scope' field.
      * @return This builder.
      */
    public ScopeLogs.Builder clearScope() {
      scope = null;
      scopeBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'logRecords' field.
      * @return The value.
      */
    public java.util.List<LogRecord> getLogRecords() {
      return logRecords;
    }


    /**
      * Sets the value of the 'logRecords' field.
      * @param value The value of 'logRecords'.
      * @return This builder.
      */
    public ScopeLogs.Builder setLogRecords(java.util.List<LogRecord> value) {
      validate(fields()[1], value);
      this.logRecords = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'logRecords' field has been set.
      * @return True if the 'logRecords' field has been set, false otherwise.
      */
    public boolean hasLogRecords() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'logRecords' field.
      * @return This builder.
      */
    public ScopeLogs.Builder clearLogRecords() {
      logRecords = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'schemaUrl' field.
      * @return The value.
      */
    public java.lang.CharSequence getSchemaUrl() {
      return schemaUrl;
    }


    /**
      * Sets the value of the 'schemaUrl' field.
      * @param value The value of 'schemaUrl'.
      * @return This builder.
      */
    public ScopeLogs.Builder setSchemaUrl(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.schemaUrl = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'schemaUrl' field has been set.
      * @return True if the 'schemaUrl' field has been set, false otherwise.
      */
    public boolean hasSchemaUrl() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'schemaUrl' field.
      * @return This builder.
      */
    public ScopeLogs.Builder clearSchemaUrl() {
      schemaUrl = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ScopeLogs build() {
      try {
        ScopeLogs record = new ScopeLogs();
        if (scopeBuilder != null) {
          try {
            record.scope = this.scopeBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("scope"));
            throw e;
          }
        } else {
          record.scope = fieldSetFlags()[0] ? this.scope : (InstrumentationScope) defaultValue(fields()[0]);
        }
        record.logRecords = fieldSetFlags()[1] ? this.logRecords : (java.util.List<LogRecord>) defaultValue(fields()[1]);
        record.schemaUrl = fieldSetFlags()[2] ? this.schemaUrl : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ScopeLogs>
    WRITER$ = (org.apache.avro.io.DatumWriter<ScopeLogs>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ScopeLogs>
    READER$ = (org.apache.avro.io.DatumReader<ScopeLogs>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.scope == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.scope.customEncode(out);
    }

    long size0 = this.logRecords.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (LogRecord e0: this.logRecords) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    if (this.schemaUrl == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.schemaUrl);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.scope = null;
      } else {
        if (this.scope == null) {
          this.scope = new InstrumentationScope();
        }
        this.scope.customDecode(in);
      }

      long size0 = in.readArrayStart();
      java.util.List<LogRecord> a0 = this.logRecords;
      if (a0 == null) {
        a0 = new SpecificData.Array<LogRecord>((int)size0, SCHEMA$.getField("logRecords").schema());
        this.logRecords = a0;
      } else a0.clear();
      SpecificData.Array<LogRecord> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<LogRecord>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          LogRecord e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new LogRecord();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.schemaUrl = null;
      } else {
        this.schemaUrl = in.readString(this.schemaUrl instanceof Utf8 ? (Utf8)this.schemaUrl : null);
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.scope = null;
          } else {
            if (this.scope == null) {
              this.scope = new InstrumentationScope();
            }
            this.scope.customDecode(in);
          }
          break;

        case 1:
          long size0 = in.readArrayStart();
          java.util.List<LogRecord> a0 = this.logRecords;
          if (a0 == null) {
            a0 = new SpecificData.Array<LogRecord>((int)size0, SCHEMA$.getField("logRecords").schema());
            this.logRecords = a0;
          } else a0.clear();
          SpecificData.Array<LogRecord> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<LogRecord>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              LogRecord e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new LogRecord();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.schemaUrl = null;
          } else {
            this.schemaUrl = in.readString(this.schemaUrl instanceof Utf8 ? (Utf8)this.schemaUrl : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










